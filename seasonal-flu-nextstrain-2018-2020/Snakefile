rule seasonal_flu_test:
    input:
        expand("seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}.png", method=EMBEDDING_METHODS),
        expand("seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv", ancestral=INTERNAL_NODE),
        expand("seasonal-flu-nextstrain-2018-2020/results/embed_pca_{ancestral}.pdf", ancestral=INTERNAL_NODE),
        expand("seasonal-flu-nextstrain-2018-2020/results/embed_t-sne_{ancestral}.pdf", ancestral=INTERNAL_NODE),
        expand("seasonal-flu-nextstrain-2018-2020/results/embed_umap_{ancestral}.pdf", ancestral=INTERNAL_NODE),
        expand("seasonal-flu-nextstrain-2018-2020/results/embed_mds_{ancestral}.pdf", ancestral=INTERNAL_NODE),
        "auspice/cartography_flu-seasonal-h3n2-ha-2018-2020.json",
        "seasonal-flu-nextstrain-2018-2020/results/table.tsv",
        "seasonal-flu-nextstrain-2018-2020/results/full_Scatterplot_metadata.csv",
        expand("seasonal-flu-nextstrain-2018-2020/results/explained_variance_pca_{ancestral}.csv", ancestral=INTERNAL_NODE),
        "seasonal-flu-nextstrain-2018-2020/results/nucleotide_diversity.txt",
        "docs/fullHDBSCANChartFlu2018-2020.html",
        "docs/fullHDBSCANChartFlu2018-2020.png"

rule seasonal_flu_test_files:
    params:
        input_fasta = "seasonal-flu-nextstrain-2018-2020/data/ncbi-h3n2-ha.fa",
        dropped_strains = "seasonal-flu-nextstrain-2018-2020/config/exclude.txt",
        reference = "seasonal-flu-nextstrain-2018-2020/config/reference_h3n2_ha.gb",
        auspice_config = "seasonal-flu-nextstrain-2018-2020/config/auspice_config.json",
        clades = "seasonal-flu-nextstrain-2018-2020/config/clades_h3n2_ha.tsv"

seasonal_flu_test_files = rules.seasonal_flu_test_files.params

rule seasonal_flu_test_parse:
    message: "Parsing fasta into sequences and metadata"
    input:
        sequences = seasonal_flu_test_files.input_fasta
    output:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/sequences.fasta",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/metadata.tsv"
    params:
        fasta_fields = "strain date accession country region"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields}
        """

rule seasonal_flu_test_deduplicate_sequences:
    message:
        """
        Deduplicating sequences
        """
    input:
        sequences = rules.seasonal_flu_test_parse.output.sequences
    output:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/deduplicated_sequences.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 seasonal-flu-nextstrain-2018-2020/scripts/deduplicate_sequences.py \
            --sequences {input.sequences} \
            --output {output.sequences}
        """

rule seasonal_flu_test_filter:
    message:
        """
        Filtering to
          - {params.sequences_per_group} sequence(s) per {params.group_by!s}
          - from {params.min_date} onwards
          - excluding strains in {input.exclude}
        """
    input:
        sequences = rules.seasonal_flu_test_deduplicate_sequences.output.sequences,
        metadata = rules.seasonal_flu_test_parse.output.metadata,
        exclude = seasonal_flu_test_files.dropped_strains
    output:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/filtered.fasta"
    params:
        group_by = "country year month",
        sequences_per_group = 10,
        random_seed = RANDOM_SEED,
        min_date = 2018.25,
        max_date = 2020.75
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output {output.sequences} \
            --group-by {params.group_by} \
            --sequences-per-group {params.sequences_per_group} \
            --subsample-seed {params.random_seed} \
            --min-date {params.min_date} \
            --max-date {params.max_date}
        """

rule seasonal_flu_test_align:
    message:
        """
        Aligning sequences to {input.reference}
          - filling gaps with N
        """
    input:
        sequences = rules.seasonal_flu_test_filter.output.sequences,
        reference = seasonal_flu_test_files.reference
    output:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --remove-reference \
            --nthreads {threads}
        """

rule seasonal_flu_test_tree:
    message: "Building tree"
    input:
        alignment = rules.seasonal_flu_test_align.output.alignment
    output:
        tree = "seasonal-flu-nextstrain-2018-2020/results/tree_raw.nwk"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads}
        """

rule seasonal_flu_test_refine:
    message:
        """
        Refining tree
          - estimate timetree
          - use {params.coalescent} coalescent timescale
          - estimate {params.date_inference} node dates
          - filter tips more than {params.clock_filter_iqd} IQDs from clock expectation
        """
    input:
        tree = rules.seasonal_flu_test_tree.output.tree,
        alignment = rules.seasonal_flu_test_align.output,
        metadata = rules.seasonal_flu_test_parse.output.metadata
    output:
        tree = "seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        node_data = "seasonal-flu-nextstrain-2018-2020/results/branch_lengths.json"
    params:
        coalescent = "opt",
        date_inference = "marginal",
        clock_filter_iqd = 4,
        clock_rate = 0.00382,
        clock_std_dev = 0.000764
    conda: "../cartography.yml"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-filter-iqd {params.clock_filter_iqd} \
            --clock-rate {params.clock_rate} \
            --clock-std-dev {params.clock_std_dev}
        """

rule seasonal_flu_test_ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        alignment = rules.seasonal_flu_test_align.output.alignment
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/nt_muts.json",
        sequences = "seasonal-flu-nextstrain-2018-2020/results/aligned_ancestral.fasta"
    params:
        inference = "joint"
    conda: "../cartography.yml"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --output-sequences {output.sequences} \
            --inference {params.inference}
        """

rule seasonal_flu_test_translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        node_data = rules.seasonal_flu_test_ancestral.output.node_data,
        reference = seasonal_flu_test_files.reference
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/aa_muts.json"
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data}
        """

rule seasonal_flu_test_clades:
    message: " Labeling clades as specified in seasonal-flu-nextstrain-2018-2020/config/clades.tsv"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        aa_muts = rules.seasonal_flu_test_translate.output.node_data,
        nuc_muts = rules.seasonal_flu_test_ancestral.output.node_data,
        clades = seasonal_flu_test_files.clades
    output:
        clade_data = "seasonal-flu-nextstrain-2018-2020/results/clades.json"
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule seasonal_flu_test_traits:
    message: "Inferring ancestral traits for {params.columns!s}"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        metadata = rules.seasonal_flu_test_parse.output.metadata
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/traits.json",
    params:
        columns = "region country"
    conda: "../cartography.yml"
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --confidence
        """

rule seasonal_flu_test_export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        metadata = rules.seasonal_flu_test_parse.output.metadata,
        branch_lengths = rules.seasonal_flu_test_refine.output.node_data,
        traits = rules.seasonal_flu_test_traits.output.node_data,
        nt_muts = rules.seasonal_flu_test_ancestral.output.node_data,
        aa_muts = rules.seasonal_flu_test_translate.output.node_data,
        embeddings = expand("seasonal-flu-nextstrain-2018-2020/results/embed_{embedding}_{ancestral}.json", embedding=EMBEDDING_METHODS, ancestral=INTERNAL_NODE),
        auspice_config = seasonal_flu_test_files.auspice_config,
        colors = "seasonal-flu-nextstrain-2018-2020/config/colors.tsv",
        clades = rules.seasonal_flu_test_clades.output.clade_data
    output:
        auspice_tree = "auspice/cartography_flu-seasonal-h3n2-ha-2018-2020.json"
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.traits} {input.clades} {input.nt_muts} {input.aa_muts} {input.embeddings} \
            --auspice-config {input.auspice_config} \
            --colors {input.colors} \
            --output {output.auspice_tree}
        """

rule seasonal_flu_test_tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input:
        tree = rules.seasonal_flu_test_export.output.auspice_tree
    output:
        table = "seasonal-flu-nextstrain-2018-2020/results/table.tsv"
    params:
        attributes = "num_date pca1 pca2 pca3 pca4 pca5 pca6 pca7 pca8 pca9 pca10 mds1 mds2 mds3 mds4 tsne_x tsne_y umap_x umap_y clade_membership pca_label mds_label umap_label t-sne_label"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --attributes {params.attributes}
        """

rule seasonal_flu_test_nucleotide_diversity:
    message: "finding the nucleotide diversity of an aligned FASTA file"
    input:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta"
    output:
        output = "seasonal-flu-nextstrain-2018-2020/results/nucleotide_diversity.txt"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/nucleotide_diversity.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_test_create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta"
    output:
        output = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_test_embed_pca:
    message: "Creating the embedding for PCA"
    input:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta",
        cluster = "seasonal-flu-nextstrain/results/pca_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_pca_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_pca_{ancestral}.pdf",
        explained_variance = "seasonal-flu-nextstrain-2018-2020/results/explained_variance_pca_{ancestral}.csv"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance}
        """

rule seasonal_flu_test_embed_tsne:
    message: "Creating the embedding for t-SNE"
    input:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta",
        distance_matrix = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        cluster = "seasonal-flu-nextstrain/results/t-sne_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_t-sne_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_t-sne_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne
        """

rule seasonal_flu_test_embed_umap:
    message: "Creating the embedding for UMAP"
    input:
        distance_matrix = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        cluster = "seasonal-flu-nextstrain/results/umap_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_umap_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_umap_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule seasonal_flu_test_embed_mds:
    message: "Creating the embedding for MDS"
    input:
        distance_matrix = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        cluster = "seasonal-flu-nextstrain/results/mds_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_mds_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_mds_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule seasonal_flu_test_create_node_output:
    message: "creates node output that is used by augur to create the phylogenies"
    input:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_{method}_ancestral.csv"
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/embed_{method}_ancestral.json"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule seasonal_flu_test_scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_sequences.csv",
        embedding = "seasonal-flu-nextstrain-2018-2020/results/embed_{method}_sequences.csv",
    output:
        figure = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}.png",
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}.csv",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}_metadata.csv"
    params:
        bootstrap = 100,
        columns = _get_embedding_columns_by_wildcards
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --columns {params.columns} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule seasonal_flu_test_concat_scatterplot_table:
    message: "concatenating all the scatterplot metadata into one csv dataframe"
    input:
       dataframe_pca = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_pca_metadata.csv",
       dataframe_mds = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_mds_metadata.csv",
       dataframe_tsne = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_t-sne_metadata.csv",
       dataframe_umap = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_umap_metadata.csv"
    output:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/full_Scatterplot_metadata.csv"
    params:
        column = "pearson_coef",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_test_create_notebook_docs:
    message: "creating linked and grouped charts using the jupyter notebook"
    input:
        #Charts, tree:
        colors = "notebooks/config/color_schemes.tsv",
        node_df = "seasonal-flu-nextstrain-2018-2020/results/table.tsv",

        pca_df = "seasonal-flu-nextstrain-2018-2020/results/embed_pca_sequences.csv",
        explained_variance_pca = "seasonal-flu-nextstrain-2018-2020/results/explained_variance_pca_sequences.csv",

        mds_df = "seasonal-flu-nextstrain-2018-2020/results/embed_mds_sequences.csv",
        tsne_df = "seasonal-flu-nextstrain-2018-2020/results/embed_t-sne_sequences.csv",
        umap_df = "seasonal-flu-nextstrain-2018-2020/results/embed_umap_sequences.csv"

    output:
        fullChartHDBSCAN20182020 = "docs/fullHDBSCANChartFlu2018-2020.html",
        fullChartHDBSCANPNG20182020 = "docs/fullHDBSCANChartFlu2018-2020.png"

    conda: "../cartography.yml"
    notebook:
        "2021-03-09Notebook.ipynb"
