rule seasonal_flu_test:
    input:
        "manuscript/figures/flu-2018-2020-ha-embeddings-by-clade.png",
        "manuscript/figures/flu-2018-2020-ha-embeddings-by-clade.html",
        "manuscript/figures/flu-2018-2020-ha-embeddings-by-cluster.html",
        "manuscript/figures/flu-2018-2020-ha-embeddings-by-cluster.png",
        "manuscript/figures/flu-2018-2020-mds-by-clade.html",
        "manuscript/figures/flu-2018-2020-mds-by-clade.png",
        "auspice/cartography_flu-seasonal-h3n2-ha-2018-2020.json",
        "seasonal-flu-nextstrain-2018-2020/results/mutation_table.csv",
        "seasonal-flu-nextstrain-2018-2020/results/full_within_between_stats.csv",
        "seasonal-flu-nextstrain-2018-2020/results/monophyletic_clusters.csv",

rule seasonal_flu_test_files:
    params:
        input_fasta = "seasonal-flu-nextstrain-2018-2020/data/ncbi-h3n2-ha.fa",
        dropped_strains = "seasonal-flu-nextstrain-2018-2020/config/exclude.txt",
        reference = "seasonal-flu-nextstrain-2018-2020/config/reference_h3n2_ha.gb",
        auspice_config = "seasonal-flu-nextstrain-2018-2020/config/auspice_config.json",
        clades = "seasonal-flu-nextstrain-2018-2020/config/clades_h3n2_ha.tsv"

seasonal_flu_test_files = rules.seasonal_flu_test_files.params

rule seasonal_flu_test_deduplicate_sequences:
    input:
        sequences = seasonal_flu_test_files.input_fasta
    output:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/deduplicated_sequences.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 seasonal-flu-nextstrain/scripts/deduplicate_sequences.py \
            --sequences {input.sequences} \
            --output {output.sequences}
        """

rule seasonal_flu_test_parse:
    input:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/deduplicated_sequences.fasta",
    output:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/sequences.fasta",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/metadata.tsv",
    params:
        fasta_fields = "strain date accession country region"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields}
        """

rule seasonal_flu_test_filter:
    input:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/sequences.fasta",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/metadata.tsv",
        exclude = seasonal_flu_test_files.dropped_strains
    output:
        sequences = "seasonal-flu-nextstrain-2018-2020/results/filtered.fasta",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/filtered_metadata.tsv",
    params:
        group_by = "country year month",
        sequences_per_group = 25,
        random_seed = RANDOM_SEED,
        min_date = 2018.0,
        max_date = 2020.0,
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --group-by {params.group_by} \
            --sequences-per-group {params.sequences_per_group} \
            --subsample-seed {params.random_seed} \
            --min-date {params.min_date} \
            --max-date {params.max_date}
        """

rule seasonal_flu_test_align:
    input:
        sequences = rules.seasonal_flu_test_filter.output.sequences,
        reference = seasonal_flu_test_files.reference,
    output:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned.fasta",
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --nthreads {threads}
        """

rule seasonal_flu_test_remove_reference_from_embedding_alignment:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/aligned.fasta",
    output:
        alignment="seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta",
    conda: "../cartography.yml"
    params:
        reference=SEASONAL_FLU_REFERENCE_STRAIN,
    shell:
        """
        seqkit grep -v -p "{params.reference}" {input.alignment} > {output.alignment}
        """

rule seasonal_flu_test_tree:
    input:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned.fasta",
    output:
        tree = "seasonal-flu-nextstrain-2018-2020/results/tree_raw.nwk",
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads}
        """

rule seasonal_flu_test_root_and_prune_tree:
    input:
        tree = "seasonal-flu-nextstrain-2018-2020/results/tree_raw.nwk",
    output:
        tree = "seasonal-flu-nextstrain-2018-2020/results/rooted_tree_raw.nwk",
    conda: "../cartography.yml"
    params:
        root=SEASONAL_FLU_REFERENCE_STRAIN,
    log:
        "logs/seasonal-flu-nextstrain-2018-2020/root_and_prune_tree.txt"
    shell:
        """
        python3 notebooks/scripts/root_and_prune_tree.py \
            --tree {input.tree} \
            --root {params.root} \
            --output {output.tree} 2>&1 | tee {log}
        """

rule seasonal_flu_test_refine:
    input:
        tree = "seasonal-flu-nextstrain-2018-2020/results/rooted_tree_raw.nwk",
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/filtered_metadata.tsv",
    output:
        tree = "seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        node_data = "seasonal-flu-nextstrain-2018-2020/results/branch_lengths.json",
    log:
        "logs/seasonal-flu-nextstrain-2018-2020/refine.txt",
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --keep-root \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --seed {params.random_seed} 2>&1 | tee {log}
        """

rule seasonal_flu_test_ancestral:
    input:
        tree = "seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta",
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/nt_muts.json",
        sequences = "seasonal-flu-nextstrain-2018-2020/results/aligned_ancestral.fasta"
    params:
        inference = "joint"
    conda: "../cartography.yml"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --output-sequences {output.sequences} \
            --inference {params.inference}
        """

rule seasonal_flu_test_translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        node_data = rules.seasonal_flu_test_ancestral.output.node_data,
        reference = seasonal_flu_test_files.reference
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/aa_muts.json"
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data}
        """

rule seasonal_flu_test_clades:
    message: " Labeling clades as specified in seasonal-flu-nextstrain-2018-2020/config/clades.tsv"
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        aa_muts = rules.seasonal_flu_test_translate.output.node_data,
        nuc_muts = rules.seasonal_flu_test_ancestral.output.node_data,
        clades = seasonal_flu_test_files.clades
    output:
        clade_data = "seasonal-flu-nextstrain-2018-2020/results/clades.json"
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule seasonal_flu_test_create_distance_matrix:
    input:
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta"
    output:
        output = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv"
    conda: "../cartography.yml"
    shell:
        """
        pathogen-distance \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_test_embed_pca:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta",
        parameters="simulations/influenza-like/no-reassortment/pca_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_pca_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_pca_{ancestral}.pdf",
        explained_variance = "seasonal-flu-nextstrain-2018-2020/results/explained_variance_pca_{ancestral}.csv"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance} \
            --encoding simplex
        """

rule seasonal_flu_test_embed_mds:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta",
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        parameters="simulations/influenza-like/no-reassortment/mds_parameters.csv",
    output:
        dataframe="seasonal-flu-nextstrain-2018-2020/results/embed_mds_{ancestral}.csv",
        figure="seasonal-flu-nextstrain-2018-2020/results/embed_mds_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule seasonal_flu_test_embed_tsne:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta",
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        parameters="simulations/influenza-like/no-reassortment/t-sne_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_t-sne_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_t-sne_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne \
                --pca-encoding simplex
        """

rule seasonal_flu_test_embed_umap:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/aligned_{ancestral}.fasta",
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        parameters="simulations/influenza-like/no-reassortment/umap_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/embed_umap_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain-2018-2020/results/embed_umap_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule seasonal_flu_test_cluster_with_optimal_parameters:
    input:
        embedding="seasonal-flu-nextstrain-2018-2020/results/embed_{method}_{ancestral}.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered_embedding="seasonal-flu-nextstrain-2018-2020/results/cluster_embed_{method}_{ancestral}.csv",
        clustered_embedding_figure="seasonal-flu-nextstrain-2018-2020/results/cluster_embed_{method}_{ancestral}.pdf",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --embedding {input.embedding} \
            --label-attribute "{wildcards.method}_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="{wildcards.method}"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe {output.clustered_embedding} \
            --output-figure {output.clustered_embedding_figure}
        """

rule seasonal_flu_test_cluster_distances_with_optimal_parameters:
    input:
        distances="seasonal-flu-nextstrain-2018-2020/results/distance_matrix_{ancestral}.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered="seasonal-flu-nextstrain-2018-2020/results/cluster_embed_genetic_{ancestral}.csv",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --distance-matrix {input.distances} \
            --label-attribute "genetic_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="genetic"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe /dev/stdout \
            | tsv-select -H --delimiter "," -f strain,genetic_label > {output.clustered}
        """

rule seasonal_flu_test_calculate_internal_node_embedding_positions:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        embedding="seasonal-flu-nextstrain-2018-2020/results/cluster_embed_{method}_sequences.csv",
    output:
        embedding="seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_{method}_sequences.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/calculate_internal_node_embedding_positions.py \
            --tree {input.tree} \
            --embedding {input.embedding} \
            --output {output.embedding}
        """

rule seasonal_flu_test_create_node_output:
    input:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_{method}_{ancestral}.csv"
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_{method}_{ancestral}.json"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule seasonal_flu_test_create_node_output_for_genetic_clusters:
    input:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_genetic_sequences.csv",
    output:
        node_data = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_genetic_sequences.json",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule seasonal_flu_test_export:
    input:
        tree = rules.seasonal_flu_test_refine.output.tree,
        metadata = "seasonal-flu-nextstrain-2018-2020/results/filtered_metadata.tsv",
        branch_lengths = rules.seasonal_flu_test_refine.output.node_data,
        nt_muts = rules.seasonal_flu_test_ancestral.output.node_data,
        aa_muts = rules.seasonal_flu_test_translate.output.node_data,
        embeddings = expand("seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_{embedding}_{ancestral}.json", embedding=EMBEDDING_METHODS, ancestral=INTERNAL_NODE),
        genetic_clusters = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_genetic_sequences.json",
        auspice_config = seasonal_flu_test_files.auspice_config,
        clades = rules.seasonal_flu_test_clades.output.clade_data
    output:
        auspice_tree = "auspice/cartography_flu-seasonal-h3n2-ha-2018-2020.json",
        root_sequence = "auspice/cartography_flu-seasonal-h3n2-ha-2018-2020_root-sequence.json",
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.clades} {input.nt_muts} {input.aa_muts} {input.embeddings} {input.genetic_clusters} \
            --auspice-config {input.auspice_config} \
            --include-root-sequence \
            --validation-mode warn \
            --minify-json \
            --output {output.auspice_tree}
        """

rule seasonal_flu_test_tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        clades="seasonal-flu-nextstrain-2018-2020/results/clades.json",
        branch_lengths="seasonal-flu-nextstrain-2018-2020/results/branch_lengths.json",
    output:
        table="seasonal-flu-nextstrain-2018-2020/results/table.tsv",
    params:
        attributes="clade_membership branch_length divergence",
        mutation_length_attribute="branch_length",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/node_data_to_table.py \
            --tree {input.tree} \
            --node-data {input.clades} {input.branch_lengths} \
            --include-internal-nodes \
            --attributes {params.attributes} \
            --mutation-length-attribute {params.mutation_length_attribute} \
            --output {output.table}
        """

rule seasonal_flu_test_create_distance_dataframe:
    input:
        dataframe_pca = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_pca_sequences.csv",
        dataframe_mds = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_mds_sequences.csv",
        dataframe_tsne = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_t-sne_sequences.csv",
        dataframe_umap = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_with_internal_nodes_umap_sequences.csv",
        dataframe_genetic = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_genetic_sequences.csv",
    output:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/embedding_data.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/make_table.py \
            --tables {input} \
            --separator ',' \
            --output {output.metadata}
        """

rule seasonal_flu_test_infer_cluster_labels:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        metadata="seasonal-flu-nextstrain-2018-2020/results/embedding_data.csv",
    output:
        labels="seasonal-flu-nextstrain-2018-2020/results/ancestral_cluster_labels.json",
    conda: "../cartography.yml"
    params:
        columns=lambda wildcards: [f"{method}_label" for method in EMBEDDING_METHODS + ["genetic"]],
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --columns {params.columns:q} \
            --output-node-data {output.labels}
        """

rule seasonal_flu_test_find_monophyletic_clusters:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        ancestral_cluster_labels="seasonal-flu-nextstrain-2018-2020/results/ancestral_cluster_labels.json",
    output:
        table="seasonal-flu-nextstrain-2018-2020/results/monophyletic_clusters.csv",
    conda: "../cartography.yml"
    params:
        dataset_name="seasonal-flu-h3n2-ha-2018-2020",
        methods=lambda wildcards: [EMBEDDING_NAME_BY_METHOD[method] for method in EMBEDDING_METHODS + ["genetic"]],
        attributes=lambda wildcards: [f"{method}_label" for method in EMBEDDING_METHODS + ["genetic"]],
    shell:
        """
        python3 notebooks/scripts/find_monophyletic_clusters.py \
            --dataset-name {params.dataset_name} \
            --tree {input.tree} \
            --labels {input.ancestral_cluster_labels} \
            --methods {params.methods:q} \
            --attributes {params.attributes:q} \
            --output {output.table}
        """

rule seasonal_flu_test_annotate_embeddings:
    input:
        left="seasonal-flu-nextstrain-2018-2020/results/table.tsv",
        right="seasonal-flu-nextstrain-2018-2020/results/embedding_data.csv",
    output:
        table="seasonal-flu-nextstrain-2018-2020/results/annotated_embeddings.tsv",
    conda: "../cartography.yml"
    params:
        join_on="strain",
        join_type="left",
    shell:
        """
        python3 notebooks/scripts/join_tables.py \
            --left {input.left} \
            --right {input.right} \
            --on {params.join_on} \
            --join-type {params.join_type} \
            --output {output.table}
        """

rule seasonal_flu_test_get_table_of_tips:
    input:
        metadata="seasonal-flu-nextstrain-2018-2020/results/table.tsv",
    output:
        metadata="seasonal-flu-nextstrain-2018-2020/results/table_of_tips.tsv",
    conda: "../cartography.yml"
    shell:
        """
        csvtk filter2 -t -f '$is_internal_node=="False"' {input.metadata} > {output.metadata}
        """

rule seasonal_flu_test_cluster_accuracy:
    input:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/table_of_tips.tsv",
        embedding = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_{method}_sequences.csv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/cluster_accuracy_{method}.csv",
    conda: "../cartography.yml"
    params:
        clade_column="clade_membership",
        ignored_clusters="unassigned",
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --true-clusters {input.metadata} \
            --true-clusters-column {params.clade_column:q} \
            --predicted-clusters {input.embedding} \
            --predicted-clusters-column "{wildcards.method}_label" \
            --ignored-clusters {params.ignored_clusters:q} \
            --output {output.dataframe}
        """

rule seasonal_flu_test_concat_HDBSCAN_table:
    message: "concatenating all the HDBSCAN data into one csv dataframe"
    input:
        accuracies=expand("seasonal-flu-nextstrain-2018-2020/results/cluster_accuracy_{method}.csv", method=EMBEDDING_METHODS + ["genetic"])
    output:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/full_HDBSCAN_metadata.csv"
    params:
        column = "normalized_vi",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.accuracies} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_test_create_mutation_table:
    input:
        reference = "seasonal-flu-nextstrain-2018-2020/config/reference_h3n2_ha.fasta",
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta",
        embedding = "seasonal-flu-nextstrain-2018-2020/results/cluster_embed_{method}_sequences.csv",
    output:
        table = "seasonal-flu-nextstrain-2018-2020/results/mutation_table_{method}.csv",
    params:
        min_allele_count=10,
        min_allele_frequency=0.5,
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/seasonal_flu_test_create_mutation_table_{method}.txt"
    log:
        "logs/seasonal_flu_test_create_mutation_table_{method}.txt"
    shell:
        """
        pathogen-cluster-mutations \
            --reference-sequence {input.reference} \
            --alignment {input.alignment} \
            --clusters {input.embedding} \
            --cluster-column {wildcards.method}_label \
            --min-allele-count {params.min_allele_count} \
            --min-allele-frequency {params.min_allele_frequency} \
            --verbose \
            --output {output.table} 2>&1 | tee {log}
        """

rule seasonal_flu_test_create_mutation_table_for_clades:
    input:
        reference = "seasonal-flu-nextstrain-2018-2020/config/reference_h3n2_ha.fasta",
        alignment = "seasonal-flu-nextstrain-2018-2020/results/aligned_sequences.fasta",
        clades = "seasonal-flu-nextstrain-2018-2020/results/table_of_tips.tsv",
    output:
        table = "seasonal-flu-nextstrain-2018-2020/results/mutation_table_clade_membership.csv",
    params:
        min_allele_count=10,
        min_allele_frequency=0.5,
        cluster_column="clade_membership",
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/seasonal_flu_test_create_mutation_table_clade_membership.txt"
    log:
        "logs/seasonal_flu_test_create_mutation_table_clade_membership.txt"
    shell:
        """
        csvtk tab2csv {input.clades} \
            | pathogen-cluster-mutations \
                --reference-sequence {input.reference} \
                --alignment {input.alignment} \
                --clusters /dev/stdin \
                --cluster-column {params.cluster_column} \
                --min-allele-count {params.min_allele_count} \
                --min-allele-frequency {params.min_allele_frequency} \
                --verbose \
                --output {output.table} 2>&1 | tee {log}
        """

rule seasonal_flu_test_concat_mutation_tables:
    input:
        mutation_tables=expand("seasonal-flu-nextstrain-2018-2020/results/mutation_table_{method}.csv", method=EMBEDDING_METHODS + ["genetic"]) + ["seasonal-flu-nextstrain-2018-2020/results/mutation_table_clade_membership.csv"],
    output:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/mutation_table.csv",
    params:
        column = "cluster_column",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.mutation_tables} \
            --separator ',' \
            --sort-by {params.column} \
            --dataset-name seasonal-flu-h3n2-ha-2018-2020 \
            --output {output.metadata}
        """

rule seasonal_flu_test_within_between_stats:
    input:
        distance_matrix = "seasonal-flu-nextstrain-2018-2020/results/distance_matrix_sequences.csv",
        annotated_embeddings = "seasonal-flu-nextstrain-2018-2020/results/annotated_embeddings.tsv",
    output:
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/within_between_stats/{group_column}.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/within_v_between_stats.py \
            --distance-matrix {input.distance_matrix} \
            --metadata {input.annotated_embeddings} \
            --group-column {wildcards.group_column} \
            --output {output.dataframe}
        """

rule seasonal_flu_test_concat_within_between_stats:
    input:
        tables=expand("seasonal-flu-nextstrain-2018-2020/results/within_between_stats/{group_column}.csv", group_column=["clade_membership"] + [f"{method}_label" for method in EMBEDDING_METHODS + ["genetic"]])
    output:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/full_within_between_stats.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --separator ',' \
            --dataset-name seasonal-flu-h3n2-ha-2018-2020 \
            --output {output.metadata}
        """

rule seasonal_flu_test_scatterplot:
    input:
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/distance_matrix_sequences.csv",
        embedding="seasonal-flu-nextstrain-2018-2020/results/embed_{method}_sequences.csv",
        method_parameters="simulations/influenza-like/no-reassortment/{method}_parameters.csv",
    output:
        figure = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}.png",
        dataframe = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}.csv",
        metadata = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_{method}_metadata.csv"
    params:
        bootstrap = 100,
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --method-parameters {input.method_parameters} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule seasonal_flu_test_concat_scatterplot_table:
    input:
       dataframe_pca = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_pca_metadata.csv",
       dataframe_mds = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_mds_metadata.csv",
       dataframe_tsne = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_t-sne_metadata.csv",
       dataframe_umap = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_umap_metadata.csv"
    output:
        metadata = "seasonal-flu-nextstrain-2018-2020/results/full_Scatterplot_metadata.csv"
    params:
        column = "pearson_coef",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_test_create_scatterplot_figure:
    input:
        scatterplot_metadata="seasonal-flu-nextstrain-2018-2020/results/full_Scatterplot_metadata.csv",
        scatterplot_pca = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_pca.csv",
        scatterplot_mds = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_mds.csv",
        scatterplot_tsne = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_t-sne.csv",
        scatterplot_umap = "seasonal-flu-nextstrain-2018-2020/results/scatterplot_umap.csv",
    output:
        scatterplot = "manuscript/figures/flu-2018-2020-ha-euclidean-distance-by-genetic-distance.png",
    conda: "../cartography.yml"
    notebook:
        "../notebooks/2022-09-26-scatterplot-figure.py.ipynb"

rule seasonal_flu_test_create_notebook_docs:
    input:
        colors = "notebooks/config/color_schemes.tsv",
        tree="seasonal-flu-nextstrain-2018-2020/results/tree.nwk",
        annotated_embeddings = "seasonal-flu-nextstrain-2018-2020/results/annotated_embeddings.tsv",
        accuracy_table="seasonal-flu-nextstrain-2018-2020/results/full_HDBSCAN_metadata.csv",
        explained_variance_pca = "seasonal-flu-nextstrain-2018-2020/results/explained_variance_pca_sequences.csv",
    output:
        fullChartPNG = "manuscript/figures/flu-2018-2020-ha-embeddings-by-clade.png",
        fullChart = "manuscript/figures/flu-2018-2020-ha-embeddings-by-clade.html",
        fullChartHDBSCAN20182020="manuscript/figures/flu-2018-2020-ha-embeddings-by-cluster.html",
        fullChartHDBSCANPNG20182020="manuscript/figures/flu-2018-2020-ha-embeddings-by-cluster.png",
        MDS_Supplement = "manuscript/figures/flu-2018-2020-mds-by-clade.html",
        MDS_Supplement_PNG = "manuscript/figures/flu-2018-2020-mds-by-clade.png",
    conda: "../cartography.yml"
    notebook:
        "2021-03-09Notebook.ipynb"

rule seasonal_flu_test_replication_subsample:
    input:
        sequences="seasonal-flu-nextstrain-2018-2020/results/sequences.fasta",
        metadata="seasonal-flu-nextstrain-2018-2020/results/metadata.tsv",
        exclude=seasonal_flu_test_files.dropped_strains,
    output:
        sequences="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/filtered_sequences.fasta",
        metadata="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/filtered_metadata.tsv",
    params:
        group_by_arg=lambda wildcards: "--group-by country year month" if wildcards.subsampling_scheme == "even" else "",
        min_date=2018.0,
        max_date=2020.0,
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            {params.group_by_arg} \
            --subsample-max-sequences {wildcards.subsample_max_sequences} \
            --subsample-seed {wildcards.replicate} \
            --min-date {params.min_date} \
            --max-date {params.max_date}
        """

rule seasonal_flu_test_replication_align:
    input:
        sequences="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/filtered_sequences.fasta",
        reference=seasonal_flu_test_files.reference,
    output:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned.fasta",
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --nthreads {threads}
        """

rule seasonal_flu_test_replication_remove_reference_from_alignment:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned.fasta",
    output:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
    params:
        reference=SEASONAL_FLU_REFERENCE_STRAIN,
    conda: "../cartography.yml"
    shell:
        """
        seqkit grep -v -p "{params.reference}" {input.alignment} > {output.alignment}
        """

rule seasonal_flu_test_replication_create_distance_matrix:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
    output:
        output="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/distance_matrix.csv",
    conda: "../cartography.yml"
    shell:
        """
        pathogen-distance \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_test_replication_embed_pca:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
        parameters="simulations/influenza-like/no-reassortment/pca_parameters.csv",
    output:
        dataframe="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/embed_pca.csv",
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --embedding-parameters {input.parameters} \
            --random-seed {wildcards.replicate} \
            --output-dataframe {output.dataframe} \
            pca \
                --encoding simplex
        """

rule seasonal_flu_test_replication_embed_mds:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/distance_matrix.csv",
        parameters="simulations/influenza-like/no-reassortment/mds_parameters.csv",
    output:
        dataframe="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/embed_mds.csv",
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {wildcards.replicate} \
            --output-dataframe {output.dataframe} \
            mds
        """

rule seasonal_flu_test_replication_embed_tsne:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/distance_matrix.csv",
        parameters="simulations/influenza-like/no-reassortment/t-sne_parameters.csv",
    output:
        dataframe="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/embed_t-sne.csv",
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {wildcards.replicate} \
            --output-dataframe {output.dataframe} \
            t-sne \
                --pca-encoding simplex
        """

rule seasonal_flu_test_replication_embed_umap:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
        distance_matrix="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/distance_matrix.csv",
        parameters="simulations/influenza-like/no-reassortment/umap_parameters.csv",
    output:
        dataframe="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/embed_umap.csv",
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {wildcards.replicate} \
            --output-dataframe {output.dataframe} \
            umap
        """

rule seasonal_flu_test_replication_cluster_with_optimal_parameters:
    input:
        embedding="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/embed_{method}.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered_embedding="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/cluster_embed_{method}.csv",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --embedding {input.embedding} \
            --label-attribute "{wildcards.method}_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="{wildcards.method}"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe {output.clustered_embedding}
        """

rule seasonal_flu_test_replication_cluster_distances_with_optimal_parameters:
    input:
        distances="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/distance_matrix.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/cluster_embed_genetic.csv",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --distance-matrix {input.distances} \
            --label-attribute "genetic_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="genetic"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe /dev/stdout \
            | tsv-select -H --delimiter "," -f strain,genetic_label > {output.clustered}
        """

rule seasonal_flu_test_replication_tree:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned.fasta",
    output:
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree_raw.nwk",
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads}
        """

rule seasonal_flu_test_replication_root_and_prune_tree:
    input:
        tree = "seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree_raw.nwk",
    output:
        tree = "seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/rooted_tree_raw.nwk",
    conda: "../cartography.yml"
    params:
        root=SEASONAL_FLU_REFERENCE_STRAIN,
        minimum_node_support=1,
    shell:
        """
        python3 notebooks/scripts/root_and_prune_tree.py \
            --tree {input.tree} \
            --root {params.root} \
            --minimum-node-support {params.minimum_node_support} \
            --output {output.tree}
        """

rule seasonal_flu_test_replication_refine:
    input:
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned_without_reference.fasta",
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/rooted_tree_raw.nwk",
        metadata="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/filtered_metadata.tsv",
    output:
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree.nwk",
        node_data="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/branch_lengths.json",
    params:
        coalescent = "opt",
    conda: "../cartography.yml"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --stochastic-resolve \
            --keep-root \
            --coalescent {params.coalescent} \
            --seed {wildcards.replicate}
        """

rule seasonal_flu_test_replication_ancestral:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree.nwk",
        alignment="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aligned.fasta",
    output:
        node_data="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/nt_muts.json",
    params:
        inference="joint",
    conda: "../cartography.yml"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference}
        """

rule seasonal_flu_test_replication_translate:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree.nwk",
        node_data="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/nt_muts.json",
        reference=seasonal_flu_test_files.reference,
    output:
        node_data="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aa_muts.json",
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data}
        """

rule seasonal_flu_test_replication_clades:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree.nwk",
        nuc_muts="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/nt_muts.json",
        aa_muts="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/aa_muts.json",
        clades=seasonal_flu_test_files.clades,
    output:
        clade_data="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/clades.json",
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule seasonal_flu_test_replication_tree_to_table:
    input:
        tree="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/tree.nwk",
        branch_lengths="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/branch_lengths.json",
        clades="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/clades.json",
    output:
        table="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/table.tsv",
    params:
        attributes="clade_membership branch_length",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/node_data_to_table.py \
            --tree {input.tree} \
            --node-data {input.clades} {input.branch_lengths} \
            --attributes {params.attributes} \
            --output {output.table}
        """

rule seasonal_flu_test_replication_cluster_accuracy:
    input:
        metadata="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/table.tsv",
        embedding="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/cluster_embed_{method}.csv",
    output:
        dataframe="seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/cluster_accuracy_{method}.csv",
    conda: "../cartography.yml"
    params:
        clade_column="clade_membership",
        ignored_clusters="unassigned",
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --true-clusters {input.metadata} \
            --true-clusters-column {params.clade_column:q} \
            --predicted-clusters {input.embedding} \
            --predicted-clusters-column "{wildcards.method}_label" \
            --ignored-clusters {params.ignored_clusters:q} \
            --output /dev/stdout \
            | csvtk mutate2 -n "subsampling_scheme" -e "'{wildcards.subsampling_scheme}'" \
            | csvtk mutate2 -n "subsample_max_sequences" -e "'{wildcards.subsample_max_sequences}'" \
            | csvtk mutate2 -n "replicate" -e "'{wildcards.replicate}'" > {output.dataframe}
        """

rule seasonal_flu_test_replication_aggregate_cluster_accuracy:
    input:
        accuracies=expand("seasonal-flu-nextstrain-2018-2020/results/replication_analysis/{subsampling_scheme}/{subsample_max_sequences}/{replicate}/cluster_accuracy_{method}.csv", subsampling_scheme=CLUSTER_REPLICATION_SUBSAMPLING_SCHEMES, method=EMBEDDING_METHODS + ["genetic"], replicate=CLUSTER_REPLICATION_REPLICATES, subsample_max_sequences=CLUSTER_REPLICATION_SUBSAMPLE_MAX_SEQUENCES),
    output:
        accuracies="seasonal-flu-nextstrain-2018-2020/results/replication_analysis_cluster_accuracy.csv",
    conda: "../cartography.yml"
    shell:
        """
        csvtk concat {input.accuracies} > {output.accuracies}
        """

rule seasonal_flu_test_replication_plot_cluster_accuracy:
    input:
        accuracies="seasonal-flu-nextstrain-2018-2020/results/replication_analysis_cluster_accuracy.csv",
    output:
        accuracies="manuscript/figures/flu-2018-2020-replication-of-cluster-accuracy.png",
    conda: "../cartography.yml"
    notebook:
        "../notebooks/plot-replication-of-cluster-accuracy.py.ipynb"

rule seasonal_flu_test_get_accessions:
    input:
        metadata="seasonal-flu-nextstrain-2018-2020/results/filtered_metadata.tsv",
    output:
        accessions="seasonal-flu-nextstrain-2018-2020/results/accessions.txt",
    conda: "../cartography.yml"
    shell:
        """
        csvtk mutate2 -t -n "versioned_accession" -e '$accession + ".1"' {input.metadata} \
            | csvtk cut -t -f versioned_accession \
            | sed 1d \
            | sort -k 1,1 > {output}
        """

rule seasonal_flu_test_get_authors_for_accessions:
    input:
        accessions="seasonal-flu-nextstrain-2018-2020/results/accessions.txt",
    output:
        authors="seasonal-flu-nextstrain-2018-2020/results/accessions_and_authors.tsv",
    params:
        fields="accession,virus-name,submitter-affiliation,submitter-names",
    conda: "../cartography.yml"
    shell:
        """
        datasets summary virus genome accession --as-json-lines --inputfile {input.accessions} \
            | dataformat tsv virus-genome --fields {params.fields} \
            | csvtk mutate2 -t -n "dataset" -e "'seasonal-flu-h3n2-ha-2018-2020'" > {output.authors}
        """
