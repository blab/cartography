SEGMENTS = [
    "ha",
    "na"
]

HA_CONCATENATED = [
    "concatenated",
    "ha",
    "na"
]

HA_CONCAT = [
    "ha",
    "concatenated",
]

rule seasonal_flu_reassortment:
    input:
        "manuscript/figures/flu-2016-2018-ha-na-embeddings-by-mcc.html",
        "manuscript/figures/flu-2016-2018-ha-na-embeddings-by-mcc.png",
        "manuscript/figures/flu-2016-2018-ha-na-pca-by-cluster.html",
        "manuscript/figures/flu-2016-2018-ha-na-pca-by-cluster.png",
        "manuscript/figures/flu-2016-2018-ha-na-mds-by-cluster.html",
        "manuscript/figures/flu-2016-2018-ha-na-mds-by-cluster.png",
        "manuscript/figures/flu-2016-2018-ha-na-tsne-by-cluster.html",
        "manuscript/figures/flu-2016-2018-ha-na-tsne-by-cluster.png",
        "manuscript/figures/flu-2016-2018-ha-na-umap-by-cluster.html",
        "manuscript/figures/flu-2016-2018-ha-na-umap-by-cluster.png",
        expand("auspice/cartography_flu-seasonal-h3n2-{segment}-2016-2018-reassort.json", segment=SEGMENTS),
        "ha-na-nextstrain/results/mutation_table.csv",
        "ha-na-nextstrain/results/monophyletic_clusters.csv",

rule seasonal_flu_reassortment_files:
    params:
        input_fasta = "ha-na-nextstrain/data/ncbi-h3n2-ha-na.fa",
        dropped_strains = "ha-na-nextstrain/config/exclude.txt",
        reference = "ha-na-nextstrain/config/reference_h3n2_ha.gb",
        auspice_config = "ha-na-nextstrain/config/auspice_config.json",
        clades = "ha-na-nextstrain/config/clades_h3n2_ha.tsv"

seasonal_flu_reassortment_files = rules.seasonal_flu_reassortment_files.params

rule seasonal_flu_reassortment_split:
    input:
        sequences =  "ha-na-nextstrain/data/ncbi-h3n2-ha-na.fa",
    output:
        sequences_ha = "ha-na-nextstrain/results/ncbi-h3n2-ha.fasta",
        sequences_na = "ha-na-nextstrain/results/ncbi-h3n2-na.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/split_fasta.py \
            --sequence {input.sequences} \
            --output_fastas {output.sequences_ha} {output.sequences_na}\
        """

rule seasonal_flu_reassortment_deduplicate_sequences:
    input:
        sequences = "ha-na-nextstrain/results/ncbi-h3n2-{segment}.fasta"
    output:
        sequences = "ha-na-nextstrain/results/deduplicated_sequences_{segment}.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/deduplicate_sequences.py \
            --sequences {input.sequences} \
            --output {output.sequences}
        """

rule seasonal_flu_reassortment_parse:
    input:
        sequences = "ha-na-nextstrain/results/deduplicated_sequences_{segment}.fasta"
    output:
        sequences = "ha-na-nextstrain/results/sequences_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv"
    params:
        fasta_fields = "strain date accession country region segment_name"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields}
        """

rule seasonal_flu_reassortment_filter:
    input:
        sequences = "ha-na-nextstrain/results/sequences_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
        exclude = seasonal_flu_reassortment_files.dropped_strains
    output:
        sequences = "ha-na-nextstrain/results/filtered_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/filtered_{segment}_metadata.tsv",
    params:
        min_date = 2016.0,
        max_date = 2018.0,
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --min-date {params.min_date} \
            --max-date {params.max_date} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata}
        """

rule seasonal_flu_reassortment_pair_ha_strains:
    input:
        sequences_ha = "ha-na-nextstrain/results/filtered_ha.fasta",
        sequences_na = "ha-na-nextstrain/results/filtered_na.fasta",
    output:
        output_ha = "ha-na-nextstrain/results/paired_ha.fasta",
        output_na = "ha-na-nextstrain/results/paired_na.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/filter_ha.py \
            --sequence {input.sequences_ha} {input.sequences_na}\
            --output_fasta {output.output_ha} {output.output_na}
        """

rule seasonal_flu_reassortment_align:
    input:
        sequences = "ha-na-nextstrain/results/paired_{segment}.fasta",
        reference = "ha-na-nextstrain/config/reference_h3n2_{segment}.gb"
    output:
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --nthreads {threads}
        """

rule seasonal_flu_reassortment_concat:
    input:
        sequence_ha = "ha-na-nextstrain/results/aligned_ha.fasta",
        sequence_na = "ha-na-nextstrain/results/aligned_na.fasta",
    output:
        fasta = "ha-na-nextstrain/results/aligned_concatenated.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/concat_sequences.py \
            --sequences {input.sequence_ha} {input.sequence_na}\
            --output {output.fasta} \
        """

rule seasonal_flu_reassortment_tree:
    input:
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta"
    output:
        tree = "ha-na-nextstrain/results/tree_raw_{segment}.nwk"
    conda: "../cartography.yml"
    params:
        tree_builder_args="-czb",
    threads: 4
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --method iqtree \
            --nthreads {threads} \
            --tree-builder-args="{params.tree_builder_args}" \
            --output {output.tree}
        """

rule seasonal_flu_reassortment_root_and_prune_tree:
    input:
        tree = "ha-na-nextstrain/results/tree_raw_{segment}.nwk",
    output:
        tree = "ha-na-nextstrain/results/rooted_tree_raw_{segment}.nwk",
    conda: "../cartography.yml"
    params:
        root=SEASONAL_FLU_REFERENCE_STRAIN,
        minimum_node_support=1,
    log:
        "logs/seasonal_flu_reassortment_root_and_prune_tree_{segment}.txt"
    shell:
        """
        python3 notebooks/scripts/root_and_prune_tree.py \
            --tree {input.tree} \
            --root {params.root} \
            --minimum-node-support {params.minimum_node_support} \
            --output {output.tree} 2>&1 | tee {log}
        """

rule seasonal_flu_reassortment_find_mccs:
    input:
        ha_tree="ha-na-nextstrain/results/rooted_tree_raw_ha.nwk",
        na_tree="ha-na-nextstrain/results/rooted_tree_raw_na.nwk",
    output:
        mccs="ha-na-nextstrain/results/treeknit_results/MCCs.json",
        ha_tree="ha-na-nextstrain/results/treeknit_results/rooted_tree_raw_ha_resolved.nwk",
        na_tree="ha-na-nextstrain/results/treeknit_results/rooted_tree_raw_na_resolved.nwk",
    params:
        gamma=2,
    conda: "../cartography.yml"
    shell:
        """
        ~/.julia/bin/treeknit \
            {input.ha_tree} \
            {input.na_tree} \
            --better-MCCs \
            -o=ha-na-nextstrain/results/treeknit_results \
            -g={params.gamma}
        """

rule seasonal_flu_reassortment_convert_mccs_to_json:
    input:
        mccs="ha-na-nextstrain/results/treeknit_results/MCCs.json",
    output:
        node_data="ha-na-nextstrain/results/mccs.json",
    conda: "../cartography.yml"
    params:
        min_mcc_size=10,
    log:
        "logs/seasonal_flu_reassortment_convert_mccs_to_json.txt"
    shell:
        """
        python3 ha-na-nextstrain/scripts/convert_mccs_to_node_json.py \
            --min-size {params.min_mcc_size} \
            --mccs {input.mccs} \
            --output {output.node_data} 2>&1 | tee {log}
        """

rule seasonal_flu_reassortment_refine:
    input:
        tree = "ha-na-nextstrain/results/rooted_tree_raw_{segment}.nwk",
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
    output:
        tree = "ha-na-nextstrain/results/tree_{segment}.nwk",
        node_data = "ha-na-nextstrain/results/branch_lengths_{segment}.json"
    conda: "../cartography.yml"
    log:
         "logs/seasonal_flu_reassortment_refine_{segment}.txt"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --keep-root \
            --keep-polytomies \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} 2>&1 | tee {log}
        """

rule seasonal_flu_reassortment_ancestral:
    input:
        tree = "ha-na-nextstrain/results/tree_{segment}.nwk",
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta"
    output:
        node_data = "ha-na-nextstrain/results/nt_muts_{segment}.json"
    params:
        inference = "joint"
    conda: "../cartography.yml"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference}
        """

rule seasonal_flu_reassortment_translate:
    input:
        tree = "ha-na-nextstrain/results/tree_{segment}.nwk",
        node_data = rules.seasonal_flu_reassortment_ancestral.output.node_data,
        reference = seasonal_flu_reassortment_files.reference
    output:
        node_data = "ha-na-nextstrain/results/aa_muts_{segment}.json"
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data}
        """

rule seasonal_flu_reassortment_clades:
    input:
        tree = "ha-na-nextstrain/results/tree_{segment}.nwk",
        aa_muts = rules.seasonal_flu_reassortment_translate.output.node_data,
        nuc_muts = rules.seasonal_flu_reassortment_ancestral.output.node_data,
        clades = seasonal_flu_reassortment_files.clades
    output:
        clade_data = "ha-na-nextstrain/results/clades_{segment}.json"
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule seasonal_flu_reassortment_create_distance_matrix:
    input:
        alignment = "ha-na-nextstrain/results/aligned_{ha_concatenated}.fasta"
    output:
        output = "ha-na-nextstrain/results/distance_matrix_{ha_concatenated}.csv"
    conda: "../cartography.yml"
    shell:
        """
        pathogen-distance \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_reassortment_clean_alignment_for_pca:
    input:
        alignment="ha-na-nextstrain/results/aligned_{ha_concatenated}.fasta",
    output:
        alignment="ha-na-nextstrain/results/cleaned_aligned_{ha_concatenated}.fasta",
    conda: "../cartography.yml"
    log:
        "logs/seasonal_flu_reassortment_clean_alignment_for_pca_{ha_concatenated}.txt"
    shell:
        """
        python3 notebooks/scripts/clean_alignment.py \
            --alignment {input.alignment} \
            --output {output.alignment} 2>&1 | tee {log}
        """

rule seasonal_flu_reassortment_embed_pca:
    input:
        alignment = "ha-na-nextstrain/results/cleaned_aligned_{ha_concatenated}.fasta",
        parameters="simulations/influenza-like/no-reassortment/pca_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_pca_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_pca_{ha_concatenated}.pdf",
        explained_variance = "ha-na-nextstrain/results/explained_variance_pca_{ha_concatenated}.csv"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance} \
            --encoding simplex
        """

rule seasonal_flu_reassortment_embed_mds:
    input:
        alignment = "ha-na-nextstrain/results/cleaned_aligned_{ha_concatenated}.fasta",
        distance_matrix = rules.seasonal_flu_reassortment_create_distance_matrix.output.output,
        parameters="simulations/influenza-like/no-reassortment/mds_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_mds_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_mds_{ha_concatenated}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule seasonal_flu_reassortment_embed_tsne:
    input:
        alignment = "ha-na-nextstrain/results/cleaned_aligned_{ha_concatenated}.fasta",
        distance_matrix = rules.seasonal_flu_reassortment_create_distance_matrix.output.output,
        parameters="simulations/influenza-like/no-reassortment/t-sne_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_t-sne_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_t-sne_{ha_concatenated}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne \
                --pca-encoding simplex
        """

rule seasonal_flu_reassortment_embed_umap:
    input:
        alignment = "ha-na-nextstrain/results/cleaned_aligned_{ha_concatenated}.fasta",
        distance_matrix = rules.seasonal_flu_reassortment_create_distance_matrix.output.output,
        parameters="simulations/influenza-like/no-reassortment/umap_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_umap_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_umap_{ha_concatenated}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule seasonal_flu_reassortment_cluster_with_optimal_parameters:
    input:
        embedding="ha-na-nextstrain/results/embed_{method}_{ha_concatenated}.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered_embedding="ha-na-nextstrain/results/cluster_embed_{method}_{ha_concatenated}.csv",
        clustered_embedding_figure="ha-na-nextstrain/results/cluster_embed_{method}_{ha_concatenated}.pdf",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --embedding {input.embedding} \
            --label-attribute "{wildcards.method}_{wildcards.ha_concatenated}_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="{wildcards.method}"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe {output.clustered_embedding} \
            --output-figure {output.clustered_embedding_figure}
        """

rule seasonal_flu_reassortment_cluster_distances_with_optimal_parameters:
    input:
        distances="ha-na-nextstrain/results/distance_matrix_{ha_concatenated}.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered="ha-na-nextstrain/results/cluster_embed_genetic_{ha_concatenated}.csv",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --distance-matrix {input.distances} \
            --label-attribute "genetic_{wildcards.ha_concatenated}_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="genetic"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe /dev/stdout \
            | tsv-select -H --delimiter "," -f strain,genetic_label > {output.clustered}
        """

rule seasonal_flu_reassortment_create_node_output:
    input:
        dataframe = "ha-na-nextstrain/results/cluster_embed_{method}_{ha_concatenated}.csv"
    output:
        node_data = "ha-na-nextstrain/results/cluster_embed_{method}_{ha_concatenated}.json"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule seasonal_flu_reassortment_export:
    input:
        tree = "ha-na-nextstrain/results/tree_{segment}.nwk",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
        branch_lengths = rules.seasonal_flu_reassortment_refine.output.node_data,
        nt_muts = rules.seasonal_flu_reassortment_ancestral.output.node_data,
        aa_muts = rules.seasonal_flu_reassortment_translate.output.node_data,
        mccs = "ha-na-nextstrain/results/mccs.json",
        embeddings = expand("ha-na-nextstrain/results/cluster_embed_{embedding}_ha.json", embedding=EMBEDDING_METHODS),
        embeddings_concat = expand("ha-na-nextstrain/results/cluster_embed_{embedding}_concatenated.json", embedding=EMBEDDING_METHODS),
        genetic_clusters_ha="ha-na-nextstrain/results/cluster_embed_genetic_ha.json",
        genetic_clusters_concat="ha-na-nextstrain/results/cluster_embed_genetic_concatenated.json",
        auspice_config = seasonal_flu_reassortment_files.auspice_config,
        clades = "ha-na-nextstrain/results/clades_ha.json"
    output:
        auspice_tree = "auspice/cartography_flu-seasonal-h3n2-{segment}-2016-2018-reassort.json",
        root_sequence = "auspice/cartography_flu-seasonal-h3n2-{segment}-2016-2018-reassort_root-sequence.json",
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.clades} {input.nt_muts} {input.aa_muts} {input.embeddings} {input.embeddings_concat} {input.mccs} \
            --auspice-config {input.auspice_config} \
            --include-root-sequence \
            --minify-json \
            --output {output.auspice_tree}
        """

rule seasonal_flu_reassortment_create_table_from_tree_and_node_data:
    input:
        tree="ha-na-nextstrain/results/tree_{segment}.nwk",
        clades="ha-na-nextstrain/results/clades_{segment}.json",
        branch_lengths="ha-na-nextstrain/results/branch_lengths_{segment}.json",
        mccs="ha-na-nextstrain/results/mccs.json",
    output:
        table="ha-na-nextstrain/results/table_{segment}.tsv",
    params:
        attributes="MCC clade_membership branch_length divergence",
        mutation_length_attribute="branch_length",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/node_data_to_table.py \
            --tree {input.tree} \
            --node-data {input.clades} {input.branch_lengths} {input.mccs} \
            --include-internal-nodes \
            --attributes {params.attributes} \
            --mutation-length-attribute {params.mutation_length_attribute} \
            --output {output.table}
        """

rule seasonal_flu_reassortment_create_distance_dataframe:
    input:
        dataframe_pca = "ha-na-nextstrain/results/cluster_embed_pca_ha.csv",
        dataframe_mds = "ha-na-nextstrain/results/cluster_embed_mds_ha.csv",
        dataframe_tsne = "ha-na-nextstrain/results/cluster_embed_t-sne_ha.csv",
        dataframe_umap = "ha-na-nextstrain/results/cluster_embed_umap_ha.csv",
        dataframe_genetic = "ha-na-nextstrain/results/cluster_embed_genetic_ha.csv",
        dataframe_pca_na = "ha-na-nextstrain/results/cluster_embed_pca_concatenated.csv",
        dataframe_mds_na = "ha-na-nextstrain/results/cluster_embed_mds_concatenated.csv",
        dataframe_tsne_na = "ha-na-nextstrain/results/cluster_embed_t-sne_concatenated.csv",
        dataframe_umap_na = "ha-na-nextstrain/results/cluster_embed_umap_concatenated.csv",
        dataframe_genetic_na = "ha-na-nextstrain/results/cluster_embed_genetic_concatenated.csv",
    output:
        metadata = "ha-na-nextstrain/results/ha_concatenated_data.csv"
    conda: "../cartography.yml"
    params:
        suffixes = "_ha _concatenated"
    shell:
        """
        python3 notebooks/scripts/make_table.py \
            --tables {input} \
            --separator ',' \
            --suffixes {params.suffixes} \
            --output {output.metadata}
        """

rule seasonal_flu_reassortment_infer_cluster_labels:
    input:
        tree="ha-na-nextstrain/results/tree_ha.nwk",
        metadata="ha-na-nextstrain/results/ha_concatenated_data.csv",
    output:
        labels="ha-na-nextstrain/results/ancestral_cluster_labels.json",
    conda: "../cartography.yml"
    params:
        columns=lambda wildcards: [
            f"{method}_{ha_concatenated}_label"
            for ha_concatenated in HA_CONCAT
            for method in EMBEDDING_METHODS + ["genetic"]
        ],
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --columns {params.columns:q} \
            --output-node-data {output.labels}
        """

rule seasonal_flu_reassortment_find_monophyletic_clusters:
    input:
        tree="ha-na-nextstrain/results/tree_ha.nwk",
        ancestral_cluster_labels="ha-na-nextstrain/results/ancestral_cluster_labels.json",
    output:
        table="ha-na-nextstrain/results/monophyletic_clusters.csv",
    conda: "../cartography.yml"
    params:
        dataset_name="seasonal-flu-h3n2-ha-na-2016-2018",
        methods=lambda wildcards: [
            EMBEDDING_NAME_BY_METHOD[method] + " (" + ("HA only" if ha_concatenated == "ha" else "HA/NA") + ")"
            for ha_concatenated in HA_CONCAT
            for method in EMBEDDING_METHODS + ["genetic"]
        ],
        attributes=lambda wildcards: [
            f"{method}_{ha_concatenated}_label"
            for ha_concatenated in HA_CONCAT
            for method in EMBEDDING_METHODS + ["genetic"]
        ],
    shell:
        """
        python3 notebooks/scripts/find_monophyletic_clusters.py \
            --dataset-name {params.dataset_name} \
            --tree {input.tree} \
            --labels {input.ancestral_cluster_labels} \
            --methods {params.methods:q} \
            --attributes {params.attributes:q} \
            --output {output.table}
        """

rule seasonal_flu_reassortment_annotate_embeddings:
    input:
        left="ha-na-nextstrain/results/table_ha.tsv",
        right="ha-na-nextstrain/results/ha_concatenated_data.csv",
    output:
        table="ha-na-nextstrain/results/annotated_embeddings.tsv",
    conda: "../cartography.yml"
    params:
        join_on="strain",
        join_type="left",
    shell:
        """
        python3 notebooks/scripts/join_tables.py \
            --left {input.left} \
            --right {input.right} \
            --on {params.join_on} \
            --join-type {params.join_type} \
            --output {output.table}
        """

rule seasonal_flu_reassortment_get_table_of_tips:
    input:
        metadata="ha-na-nextstrain/results/table_{segment}.tsv",
    output:
        metadata="ha-na-nextstrain/results/table_of_tips_{segment}.tsv",
    conda: "../cartography.yml"
    shell:
        """
        csvtk filter2 -t -f '$is_internal_node=="False"' {input.metadata} > {output.metadata}
        """

rule seasonal_flu_reassortment_cluster_accuracy:
    input:
        metadata = "ha-na-nextstrain/results/table_of_tips_ha.tsv",
        embedding = "ha-na-nextstrain/results/cluster_embed_{method}_{ha_concatenated}.csv",
    output:
        dataframe = "ha-na-nextstrain/results/cluster_accuracy_{method}_{ha_concatenated}.csv",
    conda: "../cartography.yml"
    params:
        clade_column="MCC",
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --true-clusters {input.metadata} \
            --true-clusters-column {params.clade_column:q} \
            --predicted-clusters {input.embedding} \
            --predicted-clusters-column "{wildcards.method}_{wildcards.ha_concatenated}_label" \
            --output {output.dataframe}
        """

rule seasonal_flu_reassortment_concat_HDBSCAN_table:
    input:
        dataframes = expand("ha-na-nextstrain/results/cluster_accuracy_{method}_{{ha_concatenated}}.csv", method=EMBEDDING_METHODS + ["genetic"])
    output:
        metadata = "ha-na-nextstrain/results/full_HDBSCAN_metadata_{ha_concatenated}.csv"
    params:
        column = "normalized_vi",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_reassortment_create_mutation_table:
    input:
        reference = "ha-na-nextstrain/config/reference_h3n2_{segment}.fasta",
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta",
        embedding = "ha-na-nextstrain/results/cluster_embed_{method}_concatenated.csv",
    output:
        table = "ha-na-nextstrain/results/mutation_table_{method}_{segment}.csv",
    params:
        min_allele_count=10,
        min_allele_frequency=0.5,
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/seasonal_flu_reassortment_create_mutation_table_{method}_{segment}.txt"
    log:
        "logs/seasonal_flu_reassortment_create_mutation_table_{method}_{segment}.txt"
    shell:
        """
        python3 notebooks/scripts/cluster_mutation.py \
            --reference-sequence {input.reference} \
            --alignment {input.alignment} \
            --metadata {input.embedding} \
            --metadata-column {wildcards.method}_concatenated_label \
            --min-allele-count {params.min_allele_count} \
            --min-allele-frequency {params.min_allele_frequency} \
            --output /dev/stdout \
            | csvtk mutate2 -n method -e '"{wildcards.method}"' \
            | csvtk mutate2 -n segment -e '"{wildcards.segment}"' > {output.table}
        """

rule seasonal_flu_reassortment_concat_mutation_tables:
    input:
        mutation_tables=expand("ha-na-nextstrain/results/mutation_table_{method}_{segment}.csv", method=EMBEDDING_METHODS + ["genetic"], segment=SEGMENTS),
    output:
        metadata = "ha-na-nextstrain/results/mutation_table.csv",
    params:
        column = "metadata_column",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.mutation_tables} \
            --separator ',' \
            --sort-by {params.column} \
            --dataset-name seasonal-flu-h3n2-ha-na-2016-2018 \
            --output {output.metadata}
        """

rule seasonal_flu_reassortment_within_between_stats:
    input:
        distance_matrix = "ha-na-nextstrain/results/distance_matrix_concatenated.csv",
        annotated_embeddings = "ha-na-nextstrain/results/annotated_embeddings.tsv",
    output:
        dataframe = "ha-na-nextstrain/results/within_between_stats/{group_column}.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/within_v_between_stats.py \
            --distance-matrix {input.distance_matrix} \
            --metadata {input.annotated_embeddings} \
            --group-column {wildcards.group_column} \
            --output {output.dataframe}
        """

rule seasonal_flu_reassortment_concat_within_between_stats:
    input:
        tables=expand("ha-na-nextstrain/results/within_between_stats/{group_column}.csv", group_column=["MCC"] + [f"{method}_concatenated_label" for method in EMBEDDING_METHODS + ["genetic"]])
    output:
        metadata = "ha-na-nextstrain/results/full_within_between_stats.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --separator ',' \
            --dataset-name seasonal-flu-h3n2-ha-na-2016-2018 \
            --output {output.metadata}
        """

rule seasonal_flu_reassortment_create_notebook_docs:
    input:
        colors = "notebooks/config/color_schemes.tsv",
        tree = "ha-na-nextstrain/results/tree_ha.nwk",
        annotated_embeddings="ha-na-nextstrain/results/annotated_embeddings.tsv",
        accuracy_table_ha="ha-na-nextstrain/results/full_HDBSCAN_metadata_ha.csv",
        accuracy_table_concatenated="ha-na-nextstrain/results/full_HDBSCAN_metadata_concatenated.csv",
        explained_variance_pca_ha = "ha-na-nextstrain/results/explained_variance_pca_ha.csv",
        explained_variance_pca_concatenated = "ha-na-nextstrain/results/explained_variance_pca_concatenated.csv",
    output:
        fullChartHTML = "manuscript/figures/flu-2016-2018-ha-na-all-embeddings-by-mcc.html",
        fullChartPNG = "manuscript/figures/flu-2016-2018-ha-na-all-embeddings-by-mcc.png",
        HANAChartHTML = "manuscript/figures/flu-2016-2018-ha-na-embeddings-by-mcc.html",
        HANAChartPNG = "manuscript/figures/flu-2016-2018-ha-na-embeddings-by-mcc.png",
        HANAFullChartBrushablePCAHTML = "manuscript/figures/flu-2016-2018-ha-na-pca-by-cluster.html",
        HANAFullChartBrushablePCAPNG = "manuscript/figures/flu-2016-2018-ha-na-pca-by-cluster.png",
        HANAFullChartBrushableMDSHTML = "manuscript/figures/flu-2016-2018-ha-na-mds-by-cluster.html",
        HANAFullChartBrushableMDSPNG = "manuscript/figures/flu-2016-2018-ha-na-mds-by-cluster.png",
        HANAFullChartBrushableTSNEHTML = "manuscript/figures/flu-2016-2018-ha-na-tsne-by-cluster.html",
        HANAFullChartBrushableTSNEPNG = "manuscript/figures/flu-2016-2018-ha-na-tsne-by-cluster.png",
        tsne_mcc_counts = "manuscript/figures/flu-2016-2018-ha-na-tsne-mcc-counts.png",
        HANAFullChartBrushableUMAPHTML = "manuscript/figures/flu-2016-2018-ha-na-umap-by-cluster.html",
        HANAFullChartBrushableUMAPPNG = "manuscript/figures/flu-2016-2018-ha-na-umap-by-cluster.png",
    params:
        accuracy_column="normalized_vi",
    conda: "../cartography.yml"
    notebook:
        "2022-02-23-seasonal-flu-ha-na-reassortment.ipynb"

rule seasonal_flu_reassortment_get_accessions:
    input:
        metadata="ha-na-nextstrain/results/filtered_{segment}_metadata.tsv",
    output:
        accessions="ha-na-nextstrain/results/accessions_{segment}.txt",
    conda: "../cartography.yml"
    shell:
        """
        csvtk mutate2 -t -n "versioned_accession" -e '$accession + ".1"' {input.metadata} \
            | csvtk cut -t -f versioned_accession \
            | sed 1d \
            | sort -k 1,1 > {output}
        """

rule seasonal_flu_reassortment_get_authors_for_accessions:
    input:
        accessions="ha-na-nextstrain/results/accessions_{segment}.txt",
    output:
        authors="ha-na-nextstrain/results/accessions_and_authors_{segment}.tsv",
    params:
        fields="accession,virus-name,submitter-affiliation,submitter-names",
    conda: "../cartography.yml"
    shell:
        """
        datasets summary virus genome accession --as-json-lines --inputfile {input.accessions} \
            | dataformat tsv virus-genome --fields {params.fields} \
            | csvtk mutate2 -t -n "dataset" -e "'seasonal-flu-h3n2-ha-na-2016-2018-{wildcards.segment}'" > {output.authors}
        """

rule seasonal_flu_reassortment_aggregate_authors_for_accessions:
    input:
        authors=expand("ha-na-nextstrain/results/accessions_and_authors_{segment}.tsv", segment=SEGMENTS),
    output:
        authors="ha-na-nextstrain/results/accessions_and_authors.tsv",
    conda: "../cartography.yml"
    shell:
        """
        csvtk concat -t {input.authors} > {output.authors}
        """
