SEGMENTS = [
    "ha",
    "na"
]

HA_CONCATENATED = [
    "concatenated",
    "ha",
    "na"
]

HA_CONCAT = [
    "ha",
    "concatenated",
]

rule seasonal_flu_reassortment:
    input:
        "docs/figures/flu-2016-2018-ha-na-embeddings-by-mcc.html",
        "docs/figures/flu-2016-2018-ha-na-embeddings-by-mcc.png",
        "docs/figures/flu-2016-2018-ha-na-pca-by-cluster.html",
        "docs/figures/flu-2016-2018-ha-na-pca-by-cluster.png",
        "docs/figures/flu-2016-2018-ha-na-mds-by-cluster.html",
        "docs/figures/flu-2016-2018-ha-na-mds-by-cluster.png",
        "docs/figures/flu-2016-2018-ha-na-tsne-by-cluster.html",
        "docs/figures/flu-2016-2018-ha-na-tsne-by-cluster.png",
        "docs/figures/flu-2016-2018-ha-na-umap-by-cluster.html",
        "docs/figures/flu-2016-2018-ha-na-umap-by-cluster.png",
        expand("auspice/cartography_flu-seasonal-h3n2-{segment}-2016-2018-reassort.json", segment=SEGMENTS),
        "ha-na-nextstrain/results/mutation_table.tsv"

rule seasonal_flu_reassortment_files:
    params:
        input_fasta = "ha-na-nextstrain/data/ncbi-h3n2-ha-na.fa",
        dropped_strains = "ha-na-nextstrain/config/exclude.txt",
        reference = "ha-na-nextstrain/config/reference_h3n2_ha.gb",
        auspice_config = "ha-na-nextstrain/config/auspice_config.json",
        clades = "ha-na-nextstrain/config/clades_h3n2_ha.tsv"

seasonal_flu_reassortment_files = rules.seasonal_flu_reassortment_files.params

rule seasonal_flu_reassortment_split:
    message:
        """
        Split the ha and na file into separate files
        """
    input:
        sequences =  "ha-na-nextstrain/data/ncbi-h3n2-ha-na.fa",
    output:
        sequences_ha = "ha-na-nextstrain/results/ncbi-h3n2-ha.fasta",
        sequences_na = "ha-na-nextstrain/results/ncbi-h3n2-na.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/split_fasta.py \
            --sequence {input.sequences} \
            --output_fastas {output.sequences_ha} {output.sequences_na}\
        """

rule seasonal_flu_reassortment_parse:
    message: "Parsing fasta into sequences and metadata"
    input:
        sequences = "ha-na-nextstrain/results/ncbi-h3n2-{segment}.fasta"
    output:
        sequences = "ha-na-nextstrain/results/sequences_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv"
    params:
        fasta_fields = "strain date accession country region segment_name"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields}
        """

rule seasonal_flu_reassortment_deduplicate_sequences:
    message:
        """
        Deduplicating sequences
        """
    input:
        sequences = "ha-na-nextstrain/results/sequences_{segment}.fasta"
    output:
        sequences = "ha-na-nextstrain/results/deduplicated_sequences_{segment}.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/deduplicate_sequences.py \
            --sequences {input.sequences} \
            --output {output.sequences}
        """

rule seasonal_flu_reassortment_filter:
    message:
        """
        Filtering to
          - excluding strains in {input.exclude}
        """
    input:
        sequences = "ha-na-nextstrain/results/deduplicated_sequences_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
        exclude = seasonal_flu_reassortment_files.dropped_strains
    output:
        sequences = "ha-na-nextstrain/results/filtered_{segment}.fasta"
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output {output.sequences}
        """

rule seasonal_flu_reassortment_pair_ha_strains:
    message: "making ha strains same as na strains"
    input:
        sequences_ha = "ha-na-nextstrain/results/filtered_ha.fasta",
        sequences_na = "ha-na-nextstrain/results/filtered_na.fasta",
    output:
        output_ha = "ha-na-nextstrain/results/paired_ha.fasta",
        output_na = "ha-na-nextstrain/results/paired_na.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/filter_ha.py \
            --sequence {input.sequences_ha} {input.sequences_na}\
            --output_fasta {output.output_ha} {output.output_na}
        """

rule seasonal_flu_reassortment_align:
    message:
        """
        Aligning sequences
          - filling gaps with N
        """
    input:
        sequences = "ha-na-nextstrain/results/paired_{segment}.fasta",
        reference = "ha-na-nextstrain/config/reference_h3n2_{segment}.gb"
    output:
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --remove-reference \
            --nthreads {threads}
        """

rule seasonal_flu_reassortment_concat:
    message:
        """putting the na strains with the ha strains"""
    input:
        sequence_ha = "ha-na-nextstrain/results/aligned_ha.fasta",
        sequence_na = "ha-na-nextstrain/results/aligned_na.fasta",
    output:
        fasta = "ha-na-nextstrain/results/aligned_concatenated.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ha-na-nextstrain/scripts/concat_sequences.py \
            --sequences {input.sequence_ha} {input.sequence_na}\
            --output {output.fasta} \
        """

rule seasonal_flu_reassortment_tree:
    message: "Building tree"
    input:
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta"
    output:
        tree = "ha-na-nextstrain/results/tree_raw_{segment}.nwk"
    conda: "../cartography.yml"
    threads: 4
    params:
        tree_builder_args="-czb"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --method iqtree \
            --nthreads {threads} \
            --tree-builder-args="{params.tree_builder_args}" \
            --output {output.tree}
        """

rule seasonal_flu_reassortment_refine:
    message:
        """
        Refining tree
          - estimate timetree
          - use {params.coalescent} coalescent timescale
          - estimate {params.date_inference} node dates
        """
    input:
        tree = rules.seasonal_flu_reassortment_tree.output.tree,
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta",
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
    output:
        tree = "ha-na-nextstrain/results/tree_{segment}.nwk",
        node_data = "ha-na-nextstrain/results/branch_lengths_{segment}.json"
    params:
        coalescent = "opt",
        date_inference = "marginal",
        clock_rate = lambda wildcards: 0.00382 if wildcards.segment == "ha" else 0.00267,
        clock_std_dev = lambda wildcards: 0.000764 if wildcards.segment == "ha" else 0.000534,
    conda: "../cartography.yml"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-rate {params.clock_rate} \
            --clock-std-dev {params.clock_std_dev}
        """

rule seasonal_flu_reassortment_ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.seasonal_flu_reassortment_refine.output.tree,
        alignment = "ha-na-nextstrain/results/aligned_{segment}.fasta"
    output:
        node_data = "ha-na-nextstrain/results/nt_muts_{segment}.json"
    params:
        inference = "joint"
    conda: "../cartography.yml"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference}
        """

rule seasonal_flu_reassortment_translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.seasonal_flu_reassortment_refine.output.tree,
        node_data = rules.seasonal_flu_reassortment_ancestral.output.node_data,
        reference = seasonal_flu_reassortment_files.reference
    output:
        node_data = "ha-na-nextstrain/results/aa_muts_{segment}.json"
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data}
        """

rule seasonal_flu_reassortment_clades:
    message: " Labeling clades as specified in ha-na-nextstrain/config/clades.tsv"
    input:
        tree = rules.seasonal_flu_reassortment_refine.output.tree,
        aa_muts = rules.seasonal_flu_reassortment_translate.output.node_data,
        nuc_muts = rules.seasonal_flu_reassortment_ancestral.output.node_data,
        clades = seasonal_flu_reassortment_files.clades
    output:
        clade_data = "ha-na-nextstrain/results/clades_{segment}.json"
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule seasonal_flu_reassortment_traits:
    message: "Inferring ancestral traits for {params.columns!s}"
    input:
        tree = rules.seasonal_flu_reassortment_refine.output.tree,
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
    output:
        node_data = "ha-na-nextstrain/results/traits_{segment}.json",
    params:
        columns = "region country"
    conda: "../cartography.yml"
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --confidence
        """

rule seasonal_flu_reassortment_find_mccs:
    input:
        ha_tree="ha-na-nextstrain/results/tree_raw_ha.nwk",
        na_tree="ha-na-nextstrain/results/tree_raw_na.nwk",
    output:
        mccs="ha-na-nextstrain/results/treeknit_results/MCCs.dat",
    params:
        gamma=2.5,
    conda: "../cartography.yml"
    shell:
        """
        ~/.julia/bin/treeknit \
            {input.ha_tree} \
            {input.na_tree} \
            -o=ha-na-nextstrain/results/treeknit_results \
            -g={params.gamma}
        """

rule seasonal_flu_reassortment_convert_mccs_to_json:
    input:
        mccs="ha-na-nextstrain/results/treeknit_results/MCCs.dat",
    output:
        node_data="ha-na-nextstrain/results/mccs.json",
    conda: "../cartography.yml"
    params:
        min_mcc_size=10,
    shell:
        """
        python3 ha-na-nextstrain/scripts/convert_mccs_to_node_json.py \
            --min-size {params.min_mcc_size} \
            --mccs {input.mccs} \
            --output {output.node_data}
        """

rule seasonal_flu_reassortment_create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = "ha-na-nextstrain/results/aligned_{ha_concatenated}.fasta"
    output:
        output = "ha-na-nextstrain/results/distance_matrix_{ha_concatenated}.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_reassortment_embed_pca:
    message: "Creating the embedding for PCA"
    input:
        alignment = "ha-na-nextstrain/results/aligned_{ha_concatenated}.fasta",
        cluster = "seasonal-flu-nextstrain/results/pca_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_pca_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_pca_{ha_concatenated}.pdf",
        explained_variance = "ha-na-nextstrain/results/explained_variance_pca_{ha_concatenated}.csv"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance}
        """

rule seasonal_flu_reassortment_embed_mds:
    message: "Creating the embedding for MDS"
    input:
        distance_matrix = rules.seasonal_flu_reassortment_create_distance_matrix.output.output,
        cluster = "seasonal-flu-nextstrain/results/mds_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_mds_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_mds_{ha_concatenated}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule seasonal_flu_reassortment_embed_tsne:
    message: "Creating the embedding for t-SNE"
    input:
        alignment = "ha-na-nextstrain/results/aligned_{ha_concatenated}.fasta",
        distance_matrix = rules.seasonal_flu_reassortment_create_distance_matrix.output.output,
        cluster = "seasonal-flu-nextstrain/results/t-sne_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_t-sne_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_t-sne_{ha_concatenated}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne
        """

rule seasonal_flu_reassortment_embed_umap:
    message: "Creating the embedding for UMAP"
    input:
        distance_matrix = rules.seasonal_flu_reassortment_create_distance_matrix.output.output,
        cluster = "seasonal-flu-nextstrain/results/umap_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/embed_umap_{ha_concatenated}.csv",
        figure = "ha-na-nextstrain/results/embed_umap_{ha_concatenated}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule seasonal_flu_reassortment_create_node_output:
    message: "creates node output that is used by augur to create the phylogenies"
    input:
        dataframe = "ha-na-nextstrain/results/embed_{method}_{ha_concatenated}.csv"
    output:
        node_data = "ha-na-nextstrain/results/embed_{method}_{ha_concatenated}.json"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule seasonal_flu_reassortment_rename_columns:
    message: "renaming columns for the concat so it can be exported to aupice (concat and ha colorbys)"
    input:
        clades = "ha-na-nextstrain/results/embed_{method}_concatenated.json",
        embedding = "ha-na-nextstrain/results/embed_{method}_concatenated.csv"
    output:
        node_data = "ha-na-nextstrain/results/embed_{method}_concatenated_renamed.json"
    conda: "../cartography.yml"
    params:
        rename_column = "{method}_label_ha_na",
        differentiator_column = "{method}_label"
    shell:
        """
        python3 ha-na-nextstrain/scripts/rename_columns.py \
            --clades {input.clades} \
            --embedding {input.embedding} \
            --differentiator-column {params.differentiator_column} \
            --rename-column {params.rename_column} \
            --output {output.node_data}
        """

rule seasonal_flu_reassortment_export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.seasonal_flu_reassortment_refine.output.tree,
        metadata = "ha-na-nextstrain/results/metadata_{segment}.tsv",
        branch_lengths = rules.seasonal_flu_reassortment_refine.output.node_data,
        traits = rules.seasonal_flu_reassortment_traits.output.node_data,
        nt_muts = rules.seasonal_flu_reassortment_ancestral.output.node_data,
        aa_muts = rules.seasonal_flu_reassortment_translate.output.node_data,
        mccs = "ha-na-nextstrain/results/mccs.json",
        embeddings = expand("ha-na-nextstrain/results/embed_{embedding}_ha.json", embedding=EMBEDDING_METHODS),
        embeddings_concat = expand("ha-na-nextstrain/results/embed_{embedding}_concatenated_renamed.json", embedding=EMBEDDING_METHODS),
        auspice_config = seasonal_flu_reassortment_files.auspice_config,
        clades = "ha-na-nextstrain/results/clades_ha.json"
    output:
        auspice_tree = "auspice/cartography_flu-seasonal-h3n2-{segment}-2016-2018-reassort.json"
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.traits} {input.clades} {input.nt_muts} {input.aa_muts} {input.embeddings} {input.embeddings_concat} {input.mccs} \
            --auspice-config {input.auspice_config} \
            --output {output.auspice_tree}
        """

rule seasonal_flu_reassortment_tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input:
        tree = rules.seasonal_flu_reassortment_export.output.auspice_tree
    output:
        table = "ha-na-nextstrain/results/table_{segment}.tsv"
    params:
        attributes = "num_date MCC clade_membership"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --attributes {params.attributes}
        """

rule seasonal_flu_reassortment_create_distance_dataframe:
    message: "creating distance dataframe for the ha and ha+na for animation"
    input:
        dataframe_pca = "ha-na-nextstrain/results/embed_pca_ha.csv",
        dataframe_mds = "ha-na-nextstrain/results/embed_mds_ha.csv",
        dataframe_tsne = "ha-na-nextstrain/results/embed_t-sne_ha.csv",
        dataframe_umap = "ha-na-nextstrain/results/embed_umap_ha.csv",
        dataframe_pca_na = "ha-na-nextstrain/results/embed_pca_concatenated.csv",
        dataframe_mds_na = "ha-na-nextstrain/results/embed_mds_concatenated.csv",
        dataframe_tsne_na = "ha-na-nextstrain/results/embed_t-sne_concatenated.csv",
        dataframe_umap_na = "ha-na-nextstrain/results/embed_umap_concatenated.csv"
    output:
        metadata = "ha-na-nextstrain/results/ha_concatenated_data.csv"
    conda: "../cartography.yml"
    params:
        suffixes = "_ha _concatenated"
    shell:
        """
        python3 notebooks/scripts/make_table.py \
            --tables {input} \
            --separator ',' \
            --suffixes {params.suffixes} \
            --output {output.metadata}
        """

rule seasonal_flu_reassortment_annotate_embeddings:
    input:
        left="ha-na-nextstrain/results/table_ha.tsv",
        right="ha-na-nextstrain/results/ha_concatenated_data.csv",
    output:
        table="ha-na-nextstrain/results/annotated_embeddings.tsv",
    conda: "../cartography.yml"
    params:
        join_on="strain",
    shell:
        """
        python3 notebooks/scripts/join_tables.py \
            --left {input.left} \
            --right {input.right} \
            --on {params.join_on} \
            --output {output.table}
        """

rule seasonal_flu_reassortment_cluster_metadata:
    input:
        embedding = "ha-na-nextstrain/results/embed_{method}_{ha_concatenated}.csv",
        metadata = "ha-na-nextstrain/results/table_ha.tsv",
        cluster = "seasonal-flu-nextstrain/results/{method}_parameters.csv",
    output:
        dataframe = "ha-na-nextstrain/results/HDBSCAN_metadata_{method}_{ha_concatenated}.csv",
    conda: "../cartography.yml"
    params:
        clade_column="MCC",
        missing_data_value="unassigned",
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --clade-column {params.clade_column} \
            --missing-data-value {params.missing_data_value} \
            --analysis-name {wildcards.ha_concatenated} \
            --embedding {input.embedding} \
            --metadata {input.metadata} \
            --cluster-data {input.cluster} \
            --output {output.dataframe}
        """

rule create_consensus_strains_ha_na:
    message: "finding consensus strain per clade"
    input:
        alignment = "ha-na-nextstrain/results/aligned_concatenated.fasta",
        metadata = "ha-na-nextstrain/results/mccs.json",
    output:
        consensus = "ha-na-nextstrain/results/consensus_strains.fasta"
    shell:"""
    python3 notebooks/scripts/consensus_strains.py \
        --alignment {input.alignment} \
        --metadata {input.metadata} \
        --output {output.consensus} \
    """

rule create_consensus_with_reference_ha_na:
    message: "adding reference to consensus strains"
    input: 
        reference = "ha-na-nextstrain/config/reference_h3n2_ha_na.fasta",
        consensus = "ha-na-nextstrain/results/consensus_strains.fasta"
    output:
        consensus_reference = "ha-na-nextstrain/results/consensus_with_reference.fasta"
    shell:"""
    cat {input.reference} {input.consensus} > {output.consensus_reference}
    """

rule create_mutation_table_ha_na:
    message: "making cluster specific mutation table"
    input:
        alignment = "ha-na-nextstrain/results/consensus_with_reference.fasta"
    output:
        table = "ha-na-nextstrain/results/mutation_table.tsv"
    shell:"""
    python3 notebooks/scripts/make_mutation_table.py \
        --alignment {input.alignment} \
        --output {output.table} \
    """

rule seasonal_flu_reassortment_concat_HDBSCAN_table:
    input:
       dataframes = expand("ha-na-nextstrain/results/HDBSCAN_metadata_{method}_{ha_concatenated}.csv", method=EMBEDDING_METHODS, ha_concatenated=HA_CONCAT)
    output:
        metadata = "ha-na-nextstrain/results/full_HDBSCAN_metadata.csv"
    params:
        column = "normalized_VI",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_reassortment_create_notebook_docs:
    input:
        colors = "notebooks/config/color_schemes.tsv",
        annotated_embeddings="ha-na-nextstrain/results/annotated_embeddings.tsv",
        accuracy_table="ha-na-nextstrain/results/full_HDBSCAN_metadata.csv",
        explained_variance_pca_ha = "ha-na-nextstrain/results/explained_variance_pca_ha.csv",
        explained_variance_pca_concatenated = "ha-na-nextstrain/results/explained_variance_pca_concatenated.csv",
    output:
        fullChartHTML = "docs/figures/flu-2016-2018-ha-na-embeddings-by-mcc.html",
        fullChartPNG = "docs/figures/flu-2016-2018-ha-na-embeddings-by-mcc.png",
        HANAFullChartBrushablePCAHTML = "docs/figures/flu-2016-2018-ha-na-pca-by-cluster.html",
        HANAFullChartBrushablePCAPNG = "docs/figures/flu-2016-2018-ha-na-pca-by-cluster.png",
        HANAFullChartBrushableMDSHTML = "docs/figures/flu-2016-2018-ha-na-mds-by-cluster.html",
        HANAFullChartBrushableMDSPNG = "docs/figures/flu-2016-2018-ha-na-mds-by-cluster.png",
        HANAFullChartBrushableTSNEHTML = "docs/figures/flu-2016-2018-ha-na-tsne-by-cluster.html",
        HANAFullChartBrushableTSNEPNG = "docs/figures/flu-2016-2018-ha-na-tsne-by-cluster.png",
        HANAFullChartBrushableUMAPHTML = "docs/figures/flu-2016-2018-ha-na-umap-by-cluster.html",
        HANAFullChartBrushableUMAPPNG = "docs/figures/flu-2016-2018-ha-na-umap-by-cluster.png",
    conda: "../cartography.yml"
    notebook:
        "2022-02-23-seasonal-flu-ha-na-reassortment.ipynb"
