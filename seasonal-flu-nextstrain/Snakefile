rule seasonal_flu_training:
    input:
        "docs/figures/flu-2016-2018-ha-embeddings-by-clade.png",
        "docs/figures/flu-2016-2018-ha-embeddings-by-clade.html",
        "docs/figures/flu-2016-2018-ha-euclidean-distance-by-genetic-distance.png",
        "docs/figures/flu-2016-2018-ha-embeddings-by-cluster.png",
        "docs/figures/flu-2016-2018-ha-embeddings-by-cluster.html",
        "docs/figures/flu-2016-2018-mds-by-clade.html",
        "docs/figures/flu-2016-2018-mds-by-clade.png",
        "auspice/cartography_flu-seasonal-h3n2-ha-2016-2018.json",
        "seasonal-flu-nextstrain/results/mutation_table.csv",

rule seasonal_flu_training_files:
    params:
        input_fasta = "seasonal-flu-nextstrain/data/ncbi-h3n2-ha.fa",
        dropped_strains = "seasonal-flu-nextstrain/config/exclude.txt",
        reference = "seasonal-flu-nextstrain/config/reference_h3n2_ha.gb",
        auspice_config = "seasonal-flu-nextstrain/config/auspice_config.json",
        clades = "seasonal-flu-nextstrain/config/clades_h3n2_ha.tsv",

seasonal_flu_training_files = rules.seasonal_flu_training_files.params

rule seasonal_flu_training_deduplicate_sequences:
    input:
        sequences = seasonal_flu_training_files.input_fasta,
    output:
        sequences = "seasonal-flu-nextstrain/results/deduplicated_sequences.fasta",
    conda: "../cartography.yml"
    shell:
        """
        python3 seasonal-flu-nextstrain/scripts/deduplicate_sequences.py \
            --sequences {input.sequences} \
            --output {output.sequences}
        """

rule seasonal_flu_training_parse:
    message: "Parsing fasta into sequences and metadata"
    input:
        sequences = "seasonal-flu-nextstrain/results/deduplicated_sequences.fasta",
    output:
        sequences = "seasonal-flu-nextstrain/results/sequences.fasta",
        metadata = "seasonal-flu-nextstrain/results/metadata.tsv",
    params:
        fasta_fields = "strain date accession country region"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields}
        """

rule seasonal_flu_training_filter:
    message:
        """
        Filtering to
          - {params.sequences_per_group} sequence(s) per {params.group_by!s}
          - from {params.min_date} onwards
          - excluding strains in {input.exclude}
        """
    input:
        sequences = "seasonal-flu-nextstrain/results/sequences.fasta",
        metadata = "seasonal-flu-nextstrain/results/metadata.tsv",
        exclude = seasonal_flu_training_files.dropped_strains,
    output:
        sequences = "seasonal-flu-nextstrain/results/filtered.fasta"
    params:
        group_by = "country year month",
        sequences_per_group = 25,
        min_date = 2015.75,
        max_date = 2018.25,
        random_seed = RANDOM_SEED
    log:
        "logs/seasonal-flu-nextstrain/filter.txt"
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output {output.sequences} \
            --group-by {params.group_by} \
            --sequences-per-group {params.sequences_per_group} \
            --subsample-seed {params.random_seed} \
            --min-date {params.min_date} \
            --max-date {params.max_date} 2>&1 | tee {log}
        """

rule seasonal_flu_training_align:
    message:
        """
        Aligning sequences to {input.reference}
          - filling gaps with N
        """
    input:
        sequences = rules.seasonal_flu_training_filter.output.sequences,
        reference = seasonal_flu_training_files.reference
    output:
        alignment = "seasonal-flu-nextstrain/results/aligned_sequences.fasta"
    conda: "../cartography.yml"
    threads: 4
    resources:
        mem_mb=16000,
        time="30m",
        partition="campus-new",
        qos="campus-new",
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --remove-reference \
            --nthreads {threads}
        """

rule seasonal_flu_training_create_distance_matrix:
    input:
        alignment = "seasonal-flu-nextstrain/results/aligned_{ancestral}.fasta",
    output:
        output = "seasonal-flu-nextstrain/results/distance_matrix_{ancestral}.csv",
    conda: "../cartography.yml"
    shell:
        """
        pathogen-distance \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule seasonal_flu_training_embed_pca:
    message: "Creating the embedding for PCA"
    input:
        alignment = "seasonal-flu-nextstrain/results/aligned_{ancestral}.fasta",
        parameters = "simulations/influenza-like/no-reassortment/pca_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain/results/embed_pca_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain/results/embed_pca_{ancestral}.pdf",
        explained_variance = "seasonal-flu-nextstrain/results/explained_variance_pca_{ancestral}.csv"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance}
        """

rule seasonal_flu_training_embed_mds:
    message: "Creating the embedding for MDS"
    input:
        alignment = "seasonal-flu-nextstrain/results/aligned_{ancestral}.fasta",
        distance_matrix = "seasonal-flu-nextstrain/results/distance_matrix_{ancestral}.csv",
        parameters = "simulations/influenza-like/no-reassortment/mds_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain/results/embed_mds_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain/results/embed_mds_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule seasonal_flu_training_embed_tsne:
    message: "Creating the embedding for t-SNE"
    input:
        alignment = "seasonal-flu-nextstrain/results/aligned_{ancestral}.fasta",
        distance_matrix = "seasonal-flu-nextstrain/results/distance_matrix_{ancestral}.csv",
        parameters = "simulations/influenza-like/no-reassortment/t-sne_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain/results/embed_t-sne_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain/results/embed_t-sne_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne
        """

rule seasonal_flu_training_embed_umap:
    message: "Creating the embedding for UMAP"
    input:
        alignment = "seasonal-flu-nextstrain/results/aligned_{ancestral}.fasta",
        distance_matrix = "seasonal-flu-nextstrain/results/distance_matrix_{ancestral}.csv",
        parameters = "simulations/influenza-like/no-reassortment/umap_parameters.csv",
    output:
        dataframe = "seasonal-flu-nextstrain/results/embed_umap_{ancestral}.csv",
        figure = "seasonal-flu-nextstrain/results/embed_umap_{ancestral}.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --embedding-parameters {input.parameters} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule seasonal_flu_training_cluster:
    input:
        embedding="seasonal-flu-nextstrain/results/embed_{method}_sequences.csv",
    output:
        dataframe="seasonal-flu-nextstrain/results/cluster/{method}/{distance_threshold}.csv",
        figure="seasonal-flu-nextstrain/results/cluster/{method}/{distance_threshold}.pdf",
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    conda: "../cartography.yml"
    shell:
        """
        pathogen-cluster \
            --embedding {input.embedding} \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold {wildcards.distance_threshold} \
            --label-attribute "{wildcards.method}_cluster_at_{wildcards.distance_threshold}" \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure}
        """

rule seasonal_flu_training_cluster_accuracy:
    input:
        metadata = "seasonal-flu-nextstrain/results/table.tsv",
        clusters="seasonal-flu-nextstrain/results/cluster/{method}/{distance_threshold}.csv",
    output:
        dataframe="seasonal-flu-nextstrain/results/cluster_accuracy/{method}/{distance_threshold}.csv",
    params:
        clade_column="clade_membership",
        ignored_clusters="unassigned",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --true-clusters {input.metadata} \
            --true-clusters-column {params.clade_column:q} \
            --predicted-clusters {input.clusters} \
            --predicted-clusters-column "{wildcards.method}_cluster_at_{wildcards.distance_threshold}" \
            --ignored-clusters {params.ignored_clusters:q} \
            --output {output.dataframe}
        """

rule seasonal_flu_training_concat_cluster_accuracy:
    input:
        accuracies=expand("seasonal-flu-nextstrain/results/cluster_accuracy/{method}/{distance_threshold}.csv", method=EMBEDDING_METHODS, distance_threshold=DISTANCE_THRESHOLDS)
    output:
        metadata = "seasonal-flu-nextstrain/results/full_HDBSCAN_metadata.csv"
    params:
        column = "normalized_vi",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.accuracies} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_training_get_optimal_cluster_parameters_and_accuracies:
    input:
        accuracies="seasonal-flu-nextstrain/results/full_HDBSCAN_metadata.csv",
    output:
        accuracies="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    conda: "../cartography.yml"
    shell:
        """
        csvtk mutate -f predicted_clusters_column -n distance_threshold -p "[pca|mds|t\-sne|umap]_cluster_at_(.*)" {input.accuracies} \
            | csvtk sort -k normalized_vi -k method -k distance_threshold \
            | csvtk uniq -f method -n 1 > {output.accuracies}
        """

rule seasonal_flu_training_cluster_with_optimal_parameters:
    input:
        embedding="seasonal-flu-nextstrain/results/embed_{method}_{ancestral}.csv",
        parameters="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
    output:
        clustered_embedding="seasonal-flu-nextstrain/results/cluster_embed_{method}_{ancestral}.csv",
        clustered_embedding_figure="seasonal-flu-nextstrain/results/cluster_embed_{method}_{ancestral}.pdf",
    conda: "../cartography.yml"
    params:
        min_size=CLUSTER_MIN_SIZE,
        min_samples=CLUSTER_MIN_SAMPLES,
    shell:
        """
        pathogen-cluster \
            --embedding {input.embedding} \
            --label-attribute "{wildcards.method}_label" \
            --min-size {params.min_size} \
            --min-samples {params.min_samples} \
            --distance-threshold "$(csvtk filter2 -f '$method=="{wildcards.method}"' {input.parameters} | csvtk cut -f distance_threshold | csvtk del-header)" \
            --output-dataframe {output.clustered_embedding} \
            --output-figure {output.clustered_embedding_figure}
        """

rule seasonal_flu_training_create_node_output:
    input:
        dataframe = "seasonal-flu-nextstrain/results/cluster_embed_{method}_{ancestral}.csv"
    output:
        node_data = "seasonal-flu-nextstrain/results/cluster_embed_{method}_{ancestral}.json"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule seasonal_flu_training_tree:
    message: "Building tree"
    input:
        alignment = rules.seasonal_flu_training_align.output.alignment
    output:
        tree = "seasonal-flu-nextstrain/results/tree_raw.nwk"
    conda: "../cartography.yml"
    threads: 4
    resources:
        mem_mb=16000,
        time="2:00:00",
        partition="campus-new",
        qos="campus-new",
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads}
        """

rule seasonal_flu_training_refine:
    input:
        tree = rules.seasonal_flu_training_tree.output.tree,
        alignment = rules.seasonal_flu_training_align.output,
        metadata = rules.seasonal_flu_training_parse.output.metadata
    output:
        tree = "seasonal-flu-nextstrain/results/tree.nwk",
        node_data = "seasonal-flu-nextstrain/results/branch_lengths.json",
    log:
        "logs/seasonal-flu-nextstrain/refine.txt",
    params:
        coalescent = "opt",
        date_inference = "marginal",
        clock_rate = 0.00382,
        clock_std_dev = 0.000764,
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    resources:
        mem_mb=16000,
        time="4:00:00",
        partition="campus-new",
        qos="campus-new",
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --use-fft \
            --stochastic-resolve \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-rate {params.clock_rate} \
            --clock-std-dev {params.clock_std_dev} \
            --seed {params.random_seed} 2>&1 | tee {log}
        """

rule seasonal_flu_training_ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.seasonal_flu_training_refine.output.tree,
        alignment = rules.seasonal_flu_training_align.output.alignment
    output:
        node_data = "seasonal-flu-nextstrain/results/nt_muts.json",
        sequences = "seasonal-flu-nextstrain/results/aligned_ancestral.fasta"
    params:
        inference = "joint"
    conda: "../cartography.yml"
    resources:
        mem_mb=4000,
        time="0:15:00",
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --output-sequences {output.sequences} \
            --inference {params.inference}
        """

rule seasonal_flu_training_translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.seasonal_flu_training_refine.output.tree,
        node_data = rules.seasonal_flu_training_ancestral.output.node_data,
        reference = seasonal_flu_training_files.reference
    output:
        node_data = "seasonal-flu-nextstrain/results/aa_muts.json"
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data}
        """

rule seasonal_flu_training_clades:
    message: " Labeling clades as specified in config/clades.tsv"
    input:
        tree = rules.seasonal_flu_training_refine.output.tree,
        aa_muts = rules.seasonal_flu_training_translate.output.node_data,
        nuc_muts = rules.seasonal_flu_training_ancestral.output.node_data,
        clades = seasonal_flu_training_files.clades
    output:
        clade_data = "seasonal-flu-nextstrain/results/clades.json"
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule seasonal_flu_training_create_table_from_tree_and_node_data:
    input:
        tree="seasonal-flu-nextstrain/results/tree.nwk",
        clades="seasonal-flu-nextstrain/results/clades.json",
        branch_lengths="seasonal-flu-nextstrain/results/branch_lengths.json",
    output:
        table="seasonal-flu-nextstrain/results/table.tsv",
    params:
        attributes="numdate clade_membership"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/node_data_to_table.py \
            --tree {input.tree} \
            --node-data {input.clades} {input.branch_lengths} \
            --attributes {params.attributes} \
            --output {output.table}
        """

rule seasonal_flu_training_export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.seasonal_flu_training_refine.output.tree,
        metadata = rules.seasonal_flu_training_parse.output.metadata,
        branch_lengths = rules.seasonal_flu_training_refine.output.node_data,
        nt_muts = rules.seasonal_flu_training_ancestral.output.node_data,
        aa_muts = rules.seasonal_flu_training_translate.output.node_data,
        embeddings = expand("seasonal-flu-nextstrain/results/cluster_embed_{embedding}_sequences.json", embedding=EMBEDDING_METHODS),
        auspice_config = seasonal_flu_training_files.auspice_config,
        #colors = "config/colors.tsv",
        clades = rules.seasonal_flu_training_clades.output.clade_data,
    output:
        auspice_tree = "auspice/cartography_flu-seasonal-h3n2-ha-2016-2018.json",
        root_sequence = "auspice/cartography_flu-seasonal-h3n2-ha-2016-2018_root-sequence.json",
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.clades} {input.nt_muts} {input.aa_muts} {input.embeddings} \
            --auspice-config {input.auspice_config} \
            --include-root-sequence \
            --minify-json \
            --output {output.auspice_tree}
        """

rule seasonal_flu_training_create_distance_dataframe:
    input:
        dataframe_pca = "seasonal-flu-nextstrain/results/cluster_embed_pca_sequences.csv",
        dataframe_mds = "seasonal-flu-nextstrain/results/cluster_embed_mds_sequences.csv",
        dataframe_tsne = "seasonal-flu-nextstrain/results/cluster_embed_t-sne_sequences.csv",
        dataframe_umap = "seasonal-flu-nextstrain/results/cluster_embed_umap_sequences.csv",
    output:
        metadata = "seasonal-flu-nextstrain/results/embedding_data.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/make_table.py \
            --tables {input} \
            --separator ',' \
            --output {output.metadata}
        """

rule seasonal_flu_training_annotate_embeddings:
    input:
        left="seasonal-flu-nextstrain/results/table.tsv",
        right="seasonal-flu-nextstrain/results/embedding_data.csv",
    output:
        table="seasonal-flu-nextstrain/results/annotated_embeddings.tsv",
    conda: "../cartography.yml"
    params:
        join_on="strain",
    shell:
        """
        python3 notebooks/scripts/join_tables.py \
            --left {input.left} \
            --right {input.right} \
            --on {params.join_on} \
            --output {output.table}
        """

rule seasonal_flu_training_scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix="seasonal-flu-nextstrain/results/distance_matrix_sequences.csv",
        embedding="seasonal-flu-nextstrain/results/embed_{method}_sequences.csv",
        method_parameters="simulations/influenza-like/no-reassortment/{method}_parameters.csv",
    output:
        figure = "seasonal-flu-nextstrain/results/scatterplot_{method}.png",
        dataframe = "seasonal-flu-nextstrain/results/scatterplot_{method}.csv",
        metadata = "seasonal-flu-nextstrain/results/scatterplot_{method}_metadata.csv"
    params:
        bootstrap = 100,
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --method-parameters {input.method_parameters} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule seasonal_flu_training_create_mutation_table:
    input:
        reference = "seasonal-flu-nextstrain/config/reference_h3n2_ha.fasta",
        alignment = "seasonal-flu-nextstrain/results/aligned_sequences.fasta",
        embedding = "seasonal-flu-nextstrain/results/cluster_embed_{method}_sequences.csv",
    output:
        table = "seasonal-flu-nextstrain/results/mutation_table_{method}.csv",
    params:
        min_allele_count=10,
        min_allele_frequency=0.5,
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/seasonal_flu_training_create_mutation_table_{method}.txt"
    log:
        "logs/seasonal_flu_training_create_mutation_table_{method}.txt"
    shell:
        """
        python3 notebooks/scripts/cluster_mutation.py \
            --reference-sequence {input.reference} \
            --alignment {input.alignment} \
            --metadata {input.embedding} \
            --metadata-column {wildcards.method}_label \
            --min-allele-count {params.min_allele_count} \
            --min-allele-frequency {params.min_allele_frequency} \
            --output {output.table} 2>&1 | tee {log}
        """

rule seasonal_flu_training_concat_mutation_tables:
    input:
        mutation_tables=expand("seasonal-flu-nextstrain/results/mutation_table_{method}.csv", method=EMBEDDING_METHODS),
    output:
        metadata = "seasonal-flu-nextstrain/results/mutation_table.csv",
    params:
        column = "metadata_column",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.mutation_tables} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_training_concat_scatterplot_table:
    message: "concatenating all the scatterplot metadata into one csv dataframe"
    input:
       dataframe_pca = "seasonal-flu-nextstrain/results/scatterplot_pca_metadata.csv",
       dataframe_mds = "seasonal-flu-nextstrain/results/scatterplot_mds_metadata.csv",
       dataframe_tsne = "seasonal-flu-nextstrain/results/scatterplot_t-sne_metadata.csv",
       dataframe_umap = "seasonal-flu-nextstrain/results/scatterplot_umap_metadata.csv"
    output:
        metadata = "seasonal-flu-nextstrain/results/full_Scatterplot_metadata.csv"
    params:
        column = "pearson_coef",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule seasonal_flu_training_create_scatterplot_figure:
    input:
        scatterplot_metadata="seasonal-flu-nextstrain/results/full_Scatterplot_metadata.csv",
        scatterplot_pca = "seasonal-flu-nextstrain/results/scatterplot_pca.csv",
        scatterplot_mds = "seasonal-flu-nextstrain/results/scatterplot_mds.csv",
        scatterplot_tsne = "seasonal-flu-nextstrain/results/scatterplot_t-sne.csv",
        scatterplot_umap = "seasonal-flu-nextstrain/results/scatterplot_umap.csv",
    output:
        scatterplot = "docs/figures/flu-2016-2018-ha-euclidean-distance-by-genetic-distance.png",
    conda: "../cartography.yml"
    notebook:
        "../notebooks/2022-09-26-scatterplot-figure.py.ipynb"

rule seasonal_flu_training_create_notebook_docs:
    input:
        colors="notebooks/config/color_schemes.tsv",
        annotated_embeddings="seasonal-flu-nextstrain/results/annotated_embeddings.tsv",
        accuracy_table="seasonal-flu-nextstrain/results/optimal_cluster_accuracy_and_parameters.csv",
        explained_variance_pca="seasonal-flu-nextstrain/results/explained_variance_pca_sequences.csv",
    output:
        fullChartPNG = "docs/figures/flu-2016-2018-ha-embeddings-by-clade.png",
        fullChart = "docs/figures/flu-2016-2018-ha-embeddings-by-clade.html",
        fullChartHDBSCANPNG = "docs/figures/flu-2016-2018-ha-embeddings-by-cluster.png",
        fullChartHDBSCAN = "docs/figures/flu-2016-2018-ha-embeddings-by-cluster.html",
        MDS_Supplement = "docs/figures/flu-2016-2018-mds-by-clade.html",
        MDS_Supplement_PNG = "docs/figures/flu-2016-2018-mds-by-clade.png",
    conda: "../cartography.yml"
    notebook:
        "2022-03-29-final-figures.py.ipynb"

rule seasonal_flu_training_clean:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice"
    conda: "../cartography.yml"
    shell:
        "rm -rfv {params}"
