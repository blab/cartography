EMBEDDING_METHODS = [
    "pca",
    "mds",
    "t-sne",
    "umap"
]

rule all:
    input:
        "results/tree.nwk",
        "results/aligned.fasta",
        expand("results/scatterplot_{method}.png", method=EMBEDDING_METHODS),
        expand("results/KDEDensity_{method}.png", method=EMBEDDING_METHODS)

rule files:
    params:
        dropped_strains = "config/exclude.txt"

rule download:
    output:
        mers_data = "data/elife-31257-fig1-data5-v3.zip"
    params:
        mers_url = "https://elifesciences.org/download/aHR0cHM6Ly9jZG4uZWxpZmVzY2llbmNlcy5vcmcvYXJ0aWNsZXMvMzEyNTcvZWxpZmUtMzEyNTctZmlnMS1kYXRhNS12My56aXA-/elife-31257-fig1-data5-v3.zip?_hash=YhuQfm%2BGO%2BY6MsWLZB4WrPQvYtSlHOhLnzwnvTaesws%3D"
    conda: "../cartography.yml"
    shell:
        """
        wget "{params.mers_url}" -O {output.mers_data}
        """

rule unzip:
    input:
        mers_data = "data/elife-31257-fig1-data5-v3.zip"
    output:
        mers_tree = "data/MERS_CoV_274.nex"
    conda: "../cartography.yml"
    shell:
        """
        unzip -j -d data/ {input.mers_data}
        """

rule extract_sequences:
    input:
        mers_tree = "data/MERS_CoV_274.nex"
    output:
        sequences = "results/sequences.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 scripts/nexus_to_fasta.py \
            {input.mers_tree} \
            {output.sequences}
        """

rule extract_tree:
    input:
        mers_tree = "data/MERS_CoV_274.nex"
    output:
        tree = "results/tree.nwk"
    conda: "../cartography.yml"
    shell:
        """
        python3 scripts/nexus_to_newick.py \
            {input.mers_tree} \
            {output.tree}
        """

# rule import_tree:
#     input:
#         mers_tree = "data/MERS_CoV_274.nex"
#     output:
#         tree = "results/tree.nwk",
#         node_data = "results/node_data.json"
#     conda: "../cartography.yml"
#     shell:
#         """
#         augur import beast \
#             --mcc {input.mers_tree} \
#             --output-tree {output.tree} \
#             --output-node-data {output.node_data}
#         """

rule parse:
    input:
        sequences = "results/sequences.fasta"
    output:
        alignment = "results/aligned.fasta",
        metadata = "results/metadata.tsv"
    params:
        fields = "strain accession host date"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --fields {params.fields} \
            --output-sequences {output.alignment} \
            --output-metadata {output.metadata}
        """

rule create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = rules.parse.output.alignment
    output:
        output = "results/distance_matrix.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule embed_pca:
    message: "Creating the embedding (dataframe, node JSON) for PCA"
    input:
        alignment = rules.parse.output.alignment
    output:
        node_data = "results/embed_pca.json",
        dataframe = "results/embed_pca.csv",
        figure = "results/embed_pca.pdf"
    params:
        components = 10
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --alignment {input.alignment} \
            --cluster True \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --components {params.components}
        """

rule embed_tsne:
    message: "Creating the embedding (dataframe, node JSON) for t-SNE"
    input:
        distance_matrix = rules.create_distance_matrix.output.output
    output:
        node_data = "results/embed_t-sne.json",
        dataframe = "results/embed_t-sne.csv",
        figure = "results/embed_t-sne.pdf"
    params:
        perplexity = 25.95,
        learning_rate = 200
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster True \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne \
            --perplexity {params.perplexity} \
            --learning-rate {params.learning_rate}
        """

rule embed_umap:
    message: "Creating the embedding (dataframe, node JSON) for UMAP"
    input:
        distance_matrix = rules.create_distance_matrix.output.output
    output:
        node_data = "results/embed_umap.json",
        dataframe = "results/embed_umap.csv",
        figure = "results/embed_umap.pdf"
    params:
        nearest_neighbors = 200,
        min_dist = .5
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster True \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap \
            --nearest-neighbors {params.nearest_neighbors} \
            --min-dist {params.min_dist}
        """

rule embed_mds:
    message: "Creating the embedding (dataframe, node JSON) for MDS"
    input:
        distance_matrix = rules.create_distance_matrix.output.output
    output:
        node_data = "results/embed_mds.json",
        dataframe = "results/embed_mds.csv",
        figure = "results/embed_mds.pdf"
    params:
        components = 10
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster True \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds \
            --components {params.components} \
        """

rule scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix = rules.create_distance_matrix.output.output,
        embedding = "results/embed_{method}.csv"
    output:
        figure = "results/scatterplot_{method}.png",
        dataframe = "results/scatterplot_{method}.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe}
        """

def _get_embedding_columns_by_wildcards(wildcards):
    method = wildcards.method.replace("-", "")

    if method in ("pca", "mds"):
        return f"{method}1 {method}2"
    else:
        return f"{method}_x {method}_y"

#Figure out how to get clades from Nexus tree

rule KDE_density:
    message: "creating the KDE density plot"
    input:
        embedding = "results/embed_{method}.csv",
        clades = "results/clades.json",
    output:
        figure = "results/KDEDensity_{method}.png",
        dataframe = "results/KDEDensity_{method}.csv"
    params:
        embedding_columns = _get_embedding_columns_by_wildcards
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/within_vs_between_status.py \
            --embedding {input.embedding} \
            --clades {input.clades} \
            --method {wildcards.method} \
            --embedding-columns {params.embedding_columns} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe}
        """

rule clean:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice"
    conda: "../cartography.yml"
    shell:
        "rm -rfv {params}"
