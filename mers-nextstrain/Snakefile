rule mers:
    input:
        "docs/figures/mers-embeddings-by-clade.html",
        "docs/figures/mers-embeddings-by-clade.png",
        "docs/figures/mers-embeddings-by-cluster.html",
        "docs/figures/mers-embeddings-by-cluster.png",
        "docs/figures/mers-pca-explained-variance.png",
        "docs/figures/mers-pca-by-clade.html",
        "docs/figures/mers-pca-by-clade.png",
        "docs/figures/mers-mds-by-clade.html",
        "docs/figures/mers-mds-by-clade.png",
        "docs/figures/mers-euclidean-distance-by-genetic-distance.png",
        "docs/figures/mers-pc1-by-bases-missing.png",
        "auspice/cartography_mers.json",
        "mers-nextstrain/results/nucleotide_diversity.txt",
        "mers-nextstrain/results/mutation_table.tsv",
         "mers-nextstrain/results/full_consensus_table_mers.tsv"

rule mers_download_elife_tree:
    output:
        mers_data = "mers-nextstrain/data/elife-31257-fig1-data5-v3.zip"
    params:
        mers_url = "https://elifesciences.org/download/aHR0cHM6Ly9jZG4uZWxpZmVzY2llbmNlcy5vcmcvYXJ0aWNsZXMvMzEyNTcvZWxpZmUtMzEyNTctZmlnMS1kYXRhNS12My56aXA-/elife-31257-fig1-data5-v3.zip?_hash=YhuQfm%2BGO%2BY6MsWLZB4WrPQvYtSlHOhLnzwnvTaesws%3D"
    conda: "../cartography.yml"
    shell:
        """
        curl -o {output.mers_data} "{params.mers_url}"
        """

rule mers_download_mcc_tree:
    output:
        mers_data = "mers-nextstrain/data/MERS_CoV_274_mcc.tree"
    params:
        mers_url = "https://raw.githubusercontent.com/nextstrain/augur/master/tests/builds/beast_mers/data/MERS_CoV_274_mcc.tree"
    conda: "../cartography.yml"
    shell:
        """
        curl -o {output.mers_data} "{params.mers_url}"
        """

rule mers_unzip:
    input:
        mers_data = "mers-nextstrain/data/elife-31257-fig1-data5-v3.zip"
    output:
        mers_tree = "mers-nextstrain/data/MERS_CoV_274.nex"
    conda: "../cartography.yml"
    shell:
        """
        unzip -j -d mers-nextstrain/data/ {input.mers_data}
        """

rule mers_extract_sequences:
    input:
        mers_tree = "mers-nextstrain/data/MERS_CoV_274.nex"
    output:
        sequences = "mers-nextstrain/results/aligned.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 mers-nextstrain/scripts/nexus_to_fasta.py \
            {input.mers_tree} \
            {output.sequences}
        """

rule mers_import_tree:
    input:
        mers_tree = "mers-nextstrain/data/MERS_CoV_274_mcc.tree"
    output:
        tree = "mers-nextstrain/results/tree.nwk",
        node_data = "mers-nextstrain/results/node_data.json"
    conda: "../cartography.yml"
    shell:
        """
        augur import beast \
            --mcc {input.mers_tree} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data}
        """

rule mers_parse:
    input:
        sequences = "mers-nextstrain/results/aligned.fasta"
    output:
        metadata = "mers-nextstrain/results/metadata.tsv"
    params:
        fields = "strain accession host date"
    conda: "../cartography.yml"
    shell:
        """
        python3 mers-nextstrain/scripts/parse_metadata.py \
            --sequences {input.sequences} \
            --fields {params.fields} \
            --output-metadata {output.metadata}
        """

rule mers_pca_before:
    message: "running PCA before removing any low quality strains for supplemental figure bases missing vs. PC1"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta"
    output:
        dataframe = "mers-nextstrain/results/embed_pca_before.csv",
        figure = "mers-nextstrain/results/embed_pca_before.pdf",
        explained_variance = "mers-nextstrain/results/explained_variance_pca_before.csv",
    params:
        random_seed = RANDOM_SEED,
        components = 10,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --components {params.components} \
            --explained-variance {output.explained_variance}
        """

rule mers_bases_missing_vs_pc1:
    message: "creating a bases_missing vs PC1 graph"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta",
        pca = "mers-nextstrain/results/embed_pca_before.csv",
        metadata = "mers-nextstrain/results/metadata.tsv"
    output:
        figure = "docs/figures/mers-pc1-by-bases-missing.png"
    params:
        bootstrap = 100
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/pc1_vs_bases_missing.py \
            --alignment {input.alignment} \
            --embedding {input.pca} \
            --method pca \
            --metadata {input.metadata} \
            --bootstrapping-sample {params.bootstrap} \
            --output {output.figure}
        """

rule mers_subset_data:
    message: "creating a new dataframe/fasta file"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta"
    output:
        fasta = "mers-nextstrain/results/subset_fasta.fasta",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/bases_missing.py \
            --alignment {input.alignment} \
            --output-fasta {output.fasta}
        """

rule mers_pca_after:
    message: "running PCA after removing low quality strains for supplemental figure bases missing vs. PC1"
    input:
        alignment = "mers-nextstrain/results/subset_fasta.fasta"
    output:
        dataframe = "mers-nextstrain/results/embed_pca_after.csv",
        figure = "mers-nextstrain/results/embed_pca_after.pdf",
        explained_variance = "mers-nextstrain/results/explained_variance_pca_after.csv",
    params:
        random_seed = RANDOM_SEED,
        components = 10,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --components {params.components} \
            --explained-variance {output.explained_variance}
        """

rule mers_create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta"
    output:
        output = "mers-nextstrain/results/distance_matrix.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule mers_nucleotide_diversity:
    message: "finding the nucleotide diversity of an aligned FASTA file"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta"
    output:
        output = "mers-nextstrain/results/nucleotide_diversity.txt"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/nucleotide_diversity.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule mers_clades:
     input:
         metadata = "mers-nextstrain/results/metadata.tsv",
         tree = "mers-nextstrain/results/tree.nwk"
     output:
         clades = "mers-nextstrain/results/clades.json"
     conda: "../cartography.yml"
     shell:
         """
         python3 mers-nextstrain/scripts/assign_clades.py \
             --metadata {input.metadata} \
             --tree {input.tree} \
             --output {output.clades}
         """

rule mers_embed_pca:
    message: "Creating the embedding for PCA"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta",
        cluster = "simulations/coronavirus-like/high-recombination-rate/pca_parameters.csv",
    output:
        dataframe = "mers-nextstrain/results/embed_pca.csv",
        figure = "mers-nextstrain/results/embed_pca.pdf",
        explained_variance = "mers-nextstrain/results/explained_variance_pca.csv",
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance}
        """

rule mers_embed_mds:
    message: "Creating the embedding for MDS"
    input:
        distance_matrix = "mers-nextstrain/results/distance_matrix.csv",
        cluster = "simulations/coronavirus-like/high-recombination-rate/mds_parameters.csv",
    output:
        dataframe = "mers-nextstrain/results/embed_mds.csv",
        figure = "mers-nextstrain/results/embed_mds.pdf",
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule mers_embed_tsne:
    message: "Creating the embedding for t-SNE"
    input:
        alignment="mers-nextstrain/results/aligned.fasta",
        distance_matrix = "mers-nextstrain/results/distance_matrix.csv",
        cluster = "simulations/coronavirus-like/high-recombination-rate/t-sne_parameters.csv",
    output:
        dataframe = "mers-nextstrain/results/embed_t-sne.csv",
        figure = "mers-nextstrain/results/embed_t-sne.pdf",
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne
        """

rule mers_embed_umap:
    message: "Creating the embedding for UMAP"
    input:
        distance_matrix = "mers-nextstrain/results/distance_matrix.csv",
        cluster = "simulations/coronavirus-like/high-recombination-rate/umap_parameters.csv",
    output:
        dataframe = "mers-nextstrain/results/embed_umap.csv",
        figure = "mers-nextstrain/results/embed_umap.pdf"
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule mers_create_node_output:
    input:
        dataframe = "mers-nextstrain/results/embed_{method}.csv",
    output:
        node_data = "mers-nextstrain/results/embed_{method}.json",
    conda: "../cartography.yml",
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule mers_calculate_tmrca_distances:
    input:
        tree="mers-nextstrain/results/tree.nwk",
        dates="mers-nextstrain/results/node_data.json",
    output:
        distances="mers-nextstrain/results/tmrca_distances.csv",
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/mers_calculate_tmrca_distances.txt"
    log:
        "logs/mers_calculate_tmrca_distances.txt"
    shell:
        """
        python3 notebooks/scripts/calculate_tmrca_distances.py \
            --tree {input.tree} \
            --dates {input.dates} \
            --output {output.distances} &> {log}
        """

rule mers_calculate_euclidean_distances:
    input:
        embedding="mers-nextstrain/results/embed_{method}.csv",
    output:
        distances="mers-nextstrain/results/euclidean_distances_{method}.csv",
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/mers_calculate_euclidean_distances_{method}.txt"
    log:
        "logs/mers_calculate_euclidean_distances_{method}.txt"
    shell:
        """
        python3 notebooks/scripts/calculate_euclidean_distances.py \
            --embedding {input.embedding} \
            --output {output.distances} &> {log}
        """

rule mers_plot_euclidean_distance_by_tmrca_distance:
    input:
        tmrca_distances="mers-nextstrain/results/tmrca_distances.csv",
        euclidean_distances="mers-nextstrain/results/euclidean_distances_{method}.csv",
    output:
        figure="mers-nextstrain/results/euclidean_distance_by_tmrca_{method}.pdf",
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/mers_plot_euclidean_distance_by_tmrca_distance_{method}.txt"
    log:
        "logs/mers_plot_euclidean_distance_by_tmrca_distance_{method}.txt"
    params:
        x_axis_label="Distance to tMRCA (years)",
        y_axis_label=lambda wildcards: f"Euclidean distance ({wildcards.method})",
    shell:
        """
        python3 notebooks/scripts/plot_distances.py \
            --x {input.tmrca_distances} \
            --y {input.euclidean_distances} \
            --x-axis-label {params.x_axis_label:q} \
            --y-axis-label {params.y_axis_label:q} \
            --output {output.figure}
        """

rule mers_scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix = "mers-nextstrain/results/distance_matrix.csv",
        embedding = "mers-nextstrain/results/embed_{method}.csv",
        method_parameters = "simulations/coronavirus-like/high-recombination-rate/{method}_parameters.csv",
    output:
        figure = "mers-nextstrain/results/scatterplot_{method}.png",
        dataframe = "mers-nextstrain/results/scatterplot_{method}.csv",
        metadata = "mers-nextstrain/results/scatterplot_{method}_metadata.csv",
    params:
        bootstrap = 100,
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --method-parameters {input.method_parameters} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule mers_export:
    input:
        tree = "mers-nextstrain/results/tree.nwk",
        metadata = "mers-nextstrain/results/metadata.tsv",
        branch_lengths = "mers-nextstrain/results/node_data.json",
        embeddings = expand("mers-nextstrain/results/embed_{embedding}.json", embedding=EMBEDDING_METHODS),
        clades = "mers-nextstrain/results/clades.json",
        auspice_config = "mers-nextstrain/config/auspice_config.json",
        colors = "mers-nextstrain/config/colors.tsv",
    output:
        auspice_tree = "auspice/cartography_mers.json",
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.embeddings} {input.clades} \
            --auspice-config {input.auspice_config} \
            --colors {input.colors} \
            --output {output.auspice_tree}
        """

rule mers_tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input:
        tree = "auspice/cartography_mers.json"
    output:
        table = "mers-nextstrain/results/table.tsv"
    params:
        attributes = "num_date host clade_membership"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --include-internal-nodes \
            --attributes {params.attributes}
        """

rule mers_create_distance_dataframe:
    input:
        dataframe_pca = "mers-nextstrain/results/embed_pca.csv",
        dataframe_mds = "mers-nextstrain/results/embed_mds.csv",
        dataframe_tsne = "mers-nextstrain/results/embed_t-sne.csv",
        dataframe_umap = "mers-nextstrain/results/embed_umap.csv",
    output:
        metadata = "mers-nextstrain/results/embedding_data.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/make_table.py \
            --tables {input} \
            --separator ',' \
            --output {output.metadata}
        """

rule mers_training_annotate_embeddings:
    input:
        left="mers-nextstrain/results/table.tsv",
        right="mers-nextstrain/results/embedding_data.csv",
    output:
        table="mers-nextstrain/results/annotated_embeddings.tsv",
    conda: "../cartography.yml"
    params:
        join_on="strain",
    shell:
        """
        python3 notebooks/scripts/join_tables.py \
            --left {input.left} \
            --right {input.right} \
            --on {params.join_on} \
            --output {output.table}
        """

rule mers_cluster_metadata:
    message: "Creating the metadata dataframe for HDBSCAN results for main paper"
    input:
        embedding = "mers-nextstrain/results/embed_{method}.csv",
        metadata = "mers-nextstrain/results/table.tsv",
        cluster = "simulations/coronavirus-like/high-recombination-rate/{method}_parameters.csv",
    output:
        dataframe = "mers-nextstrain/results/HDBSCAN_metadata_{method}.csv",
    conda: "../cartography.yml"
    params:
        clade_column="clade_membership",
        missing_data_value="unassigned",
        cluster_threshold = CLUSTER_THRESHOLD,
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --clade-column {params.clade_column} \
            --missing-data-value {params.missing_data_value} \
            --embedding {input.embedding} \
            --metadata {input.metadata} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --output {output.dataframe}
        """

rule mers_concat_HDBSCAN_table:
    message: "concatenating all the HDBSCAN data into one csv dataframe"
    input:
       dataframe_pca = "mers-nextstrain/results/HDBSCAN_metadata_pca.csv",
       dataframe_mds = "mers-nextstrain/results/HDBSCAN_metadata_mds.csv",
       dataframe_tsne = "mers-nextstrain/results/HDBSCAN_metadata_t-sne.csv",
       dataframe_umap = "mers-nextstrain/results/HDBSCAN_metadata_umap.csv",
    output:
        metadata = "mers-nextstrain/results/full_HDBSCAN_metadata.csv"
    params:
        column = "MCC",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule mers_concat_scatterplot_table:
    message: "concatenating all the scatterplot metadata into one csv dataframe"
    input:
       dataframe_pca = "mers-nextstrain/results/scatterplot_pca_metadata.csv",
       dataframe_mds = "mers-nextstrain/results/scatterplot_mds_metadata.csv",
       dataframe_tsne = "mers-nextstrain/results/scatterplot_t-sne_metadata.csv",
       dataframe_umap = "mers-nextstrain/results/scatterplot_umap_metadata.csv"
    output:
        metadata = "mers-nextstrain/results/full_Scatterplot_metadata.csv"
    params:
        column = "pearson_coef",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule create_consensus_strains_mers:
    message: "finding consensus strain per clade"
    input:
        alignment = "mers-nextstrain/results/aligned.fasta",
        metadata = "mers-nextstrain/results/annotated_embeddings.tsv",
    output:
        consensus = "mers-nextstrain/results/consensus_strains_{embedding}.fasta"
    params:
        group_by = lambda wildcards: f"{wildcards.embedding.lower()}_label" # mds_label
    shell:"""
    python3 notebooks/scripts/consensus_strains.py \
        --alignment {input.alignment} \
        --metadata {input.metadata} \
        --group-by {params.group_by} \
        --output {output.consensus} \
    """

rule create_consensus_with_reference_mers:
    message: "adding reference to consensus strains"
    input:
        reference = "mers-nextstrain/config/reference_mers.fasta",
        consensus = "mers-nextstrain/results/consensus_strains_{embedding}.fasta"
    output:
        consensus_reference = "mers-nextstrain/results/consensus_with_reference_{embedding}.fasta"
    shell:"""
    cat {input.reference} {input.consensus} > {output.consensus_reference}
    """

rule create_mutation_table_mers:
    message: "making cluster specific mutation table"
    input:
        alignment = "mers-nextstrain/results/consensus_with_reference_{embedding}.fasta"
    output:
        table = "mers-nextstrain/results/mutation_table_{embedding}.tsv"
    shell:"""
    python3 notebooks/scripts/make_mutation_table.py \
        --alignment {input.alignment} \
        --output {output.table} \
    """

rule mers_concat_consensus_table:
    message: "concatenating all the scatterplot metadata into one csv dataframe"
    input:
       dataframe_pca = "mers-nextstrain/results/mutation_table_pca.tsv",
       dataframe_mds = "mers-nextstrain/results/mutation_table_mds.tsv",
       dataframe_tsne = "mers-nextstrain/results/mutation_table_tsne.tsv",
       dataframe_umap = "mers-nextstrain/results/mutation_table_umap.tsv"
    output:
        metadata = "mers-nextstrain/results/full_consensus_table_mers.tsv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --output {output.metadata}
        """

rule mers_create_scatterplot_figure:
    input:
        scatterplot_metadata="mers-nextstrain/results/full_Scatterplot_metadata.csv",
        scatterplot_pca = "mers-nextstrain/results/scatterplot_pca.csv",
        scatterplot_mds = "mers-nextstrain/results/scatterplot_mds.csv",
        scatterplot_tsne = "mers-nextstrain/results/scatterplot_t-sne.csv",
        scatterplot_umap = "mers-nextstrain/results/scatterplot_umap.csv",
    output:
        scatterplot = "docs/figures/mers-euclidean-distance-by-genetic-distance.png",
    conda: "../cartography.yml"
    notebook:
        "../notebooks/2022-09-26-scatterplot-figure.py.ipynb"

rule mers_create_notebook_docs:
    input:
        colors="notebooks/config/color_schemes.tsv",
        annotated_embeddings="mers-nextstrain/results/annotated_embeddings.tsv",
        accuracy_table="mers-nextstrain/results/full_HDBSCAN_metadata.csv",
        explained_variance_pca = "mers-nextstrain/results/explained_variance_pca.csv",
    output:
        fullChart = "docs/figures/mers-embeddings-by-clade.html",
        fullChartPNG = "docs/figures/mers-embeddings-by-clade.png",
        fullChartHDBSCAN = "docs/figures/mers-embeddings-by-cluster.html",
        fullChartHDBSCANPNG = "docs/figures/mers-embeddings-by-cluster.png",
        Explained_variance_PCA = "docs/figures/mers-pca-explained-variance.png",
        PCA_Supplement = "docs/figures/mers-pca-by-clade.html",
        PCA_Supplement_PNG = "docs/figures/mers-pca-by-clade.png",
        MDS_Supplement = "docs/figures/mers-mds-by-clade.html",
        MDS_Supplement_PNG = "docs/figures/mers-mds-by-clade.png",
    conda: "../cartography.yml"
    notebook:
        "2022-03-29-final-figures.py.ipynb"
