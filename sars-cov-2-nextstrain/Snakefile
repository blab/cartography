configfile: "config/config.yaml"

EMBEDDING_METHODS = [
    "pca",
    "mds",
    "t-sne",
    "umap"
]

KDE_METHODS = [
    "pca",
    "mds",
    "t-sne",
    "umap",
    "genetic"
]


rule all:
    input:
        "../auspice/cartography_ncov.json",
        expand("results/scatterplot_{method}.png", method=EMBEDDING_METHODS),
        expand("results/KDEDensity_{method}.png", method=KDE_METHODS),
        "results/distance_matrix.csv",
        "results/embed_pca.pdf",
        "results/embed_t-sne.pdf",
        "results/embed_umap.pdf",
        "results/embed_mds.pdf",
        "results/clades.json",
        "results/accuracy_figure_HDBSCAN.png",
        "results/global-xsmall_alignment.fasta",
        "results/table.tsv",
        "results/full_KDE_metadata.csv",
        "results/full_Scatterplot_metadata.csv",
        "results/explained_variance_pca.csv",
        "../docs/FullKDEDensitySars-cov-2.png",
        "../docs/FullScatterplotSars-cov-2.png",
        "../docs/FullLinkedChartBrushableSars-cov-2.html",
        "../docs/sars-cov-2-embeddings.png",
        "../docs/FullPCABrushSupplementSars-cov-2.html",
        "results/nucleotide_diversity.txt",
        "../docs/explainedVarianceSars-cov-2.png",
        "../docs/bases_missing_vs_pc1_Sars.png",
        "../docs/fullHDBSCANChartSars-cov-2.png"


rule decompress_alignment:
    input:
        alignment="data/global-xsmall_alignment.fasta.xz"
    output:
        alignment="results/global-xsmall_alignment.fasta"
    conda:
        config["conda_environment"]
    shell:
        """
        xz -c -d {input} > {output}
        """

rule decompress_metadata:
    input:
        metadata="data/global-xsmall_metadata.tsv.xz" 
    output:
        metadata="results/global-xsmall_metadata.tsv"
    conda:
        config["conda_environment"]
    shell:
        """
        xz -c -d {input} > {output} \
        """

rule get_low_quality:
    input:
        metadata="results/global-xsmall_metadata.tsv" 
    output:
        output ="results/global-xsmall_metadata_low_quality.tsv"
    conda:
        config["conda_environment"]
    shell:
        """
        python3 scripts/bad_samples.py \
            --metadata {input.metadata} \
            --output {output.output}
        """

rule embed_pca_before:
    message: "Creating the embedding for PCA bases missing analysis"
    input:
        alignment = "results/global-xsmall_alignment.fasta",
    output:
        dataframe = "results/embed_pca_before.csv",
    params:
        components = 10
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --alignment {input.alignment} \
            --random-seed 314159 \
            --output-dataframe {output.dataframe} \
            pca \
            --components {params.components} \
        """

rule bases_missing_vs_pc1:
    message: "creating a bases_missing vs PC1 graph"
    input:
        alignment = "results/global-xsmall_alignment.fasta",
        pca = "results/embed_pca_before.csv",
        metadata = "results/global-xsmall_metadata_low_quality.tsv"
    output:
        figure = "../docs/bases_missing_vs_pc1_Sars.png"
    params:
        bootstrap = 100
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/pc1_vs_bases_missing.py \
            --alignment {input.alignment} \
            --embedding {input.pca} \
            --method pca \
            --metadata {input.metadata} \
            --bootstrapping-sample {params.bootstrap} \
            --output {output.figure}
        """

rule impute_data:
    message: "creating an imputed dataframe/fasta file"
    input:
        alignment = "results/global-xsmall_alignment.fasta"
    output:
        dataframe = "results/imputed_alignment.csv",
        fasta = "results/imputed_alignment.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/impute_data.py \
            --alignment {input.alignment} \
            --output-dataframe {output.dataframe} \
            --output-fasta {output.fasta}
        """

rule tree:
    input:
        alignment="results/global-xsmall_alignment.fasta"
    output:
        tree="results/tree_raw.nwk"
    log:
        "logs/tree.txt"
    benchmark:
        "benchmarks/tree.txt"
    threads: 4
    resources:
        # Multiple sequence alignments can use up to 40 times their disk size in
        # memory, especially for larger alignments.
        # Note that Snakemake >5.10.0 supports input.size_mb to avoid converting from bytes to MB.
        mem_mb=lambda wildcards, input: 40 * int(input.size / 1024 / 1024)
    conda: config["conda_environment"]
    params:
        tree_builder_args=config["tree"]["tree-builder-args"]
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --tree-builder-args={params.tree_builder_args:q} \
            --output {output.tree} \
            --nthreads {threads} 2>&1 | tee {log}
        """


rule refine:
    message:
        """
        Refining tree
          - estimate timetree
          - use {params.coalescent} coalescent timescale
          - estimate {params.date_inference} node dates
        """
    input:
        tree="results/tree_raw.nwk",
        alignment="results/global-xsmall_alignment.fasta",
        metadata="data/global-xsmall_metadata.tsv.xz"
    output:
        tree = "results/tree.nwk",
        node_data = "results/branch_lengths.json"
    log:
        "logs/refine.txt"
    benchmark:
        "benchmarks/refine.txt"
    threads: 1
    resources:
        # Multiple sequence alignments can use up to 15 times their disk size in
        # memory.
        # Note that Snakemake >5.10.0 supports input.size_mb to avoid converting from bytes to MB.
        mem_mb=lambda wildcards, input: 15 * int(input.size / 1024 / 1024)
    params:
        root = config["refine"]["root"],
        clock_rate = config["refine"]["clock_rate"],
        clock_std_dev = config["refine"]["clock_std_dev"],
        coalescent = config["refine"]["coalescent"],
        date_inference = config["refine"]["date_inference"],
        divergence_unit = config["refine"]["divergence_unit"],
        clock_filter_iqd = config["refine"]["clock_filter_iqd"],
        keep_polytomies = "--keep-polytomies" if config["refine"].get("keep_polytomies", False) else "",
        timetree = "" if config["refine"].get("no_timetree", False) else "--timetree"
    conda: config["conda_environment"]
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --root {params.root} \
            {params.timetree} \
            {params.keep_polytomies} \
            --clock-rate {params.clock_rate} \
            --clock-std-dev {params.clock_std_dev} \
            --coalescent {params.coalescent} \
            --date-inference {params.date_inference} \
            --divergence-unit {params.divergence_unit} \
            --date-confidence \
            --no-covariance \
            --clock-filter-iqd {params.clock_filter_iqd} 2>&1 | tee {log}
        """


rule nucleotide_diversity:
    message: "finding the nucleotide diversity of an aligned FASTA file"
    input:
        alignment = "results/global-xsmall_alignment.fasta",
    output:
        output = "results/nucleotide_diversity.txt"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/nucleotide_diversity.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule make_clades:
    message: "creating the clades file to be used in the rest of the analysis"
    input:
        metadata = "results/global-xsmall_metadata.tsv"
    output:
        output = "results/clades.json"
    params:
        col_name = "Nextstrain_clade"
    shell:
        """
        python3 ../notebooks/scripts/make_clades.py \
            --metadata {input.metadata} \
            --output {output.output} \
            --col-name {params.col_name}
        """

rule create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = "results/global-xsmall_alignment.fasta",
    output:
        output = "results/distance_matrix.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule embed_pca:
    message: "Creating the embedding (dataframe, node JSON) for PCA"
    input:
        alignment = "results/imputed_alignment.fasta",
        cluster = "results/output_HDBSCAN.csv"
    output:
        node_data = "results/embed_pca.json",
        dataframe = "results/embed_pca.csv",
        figure = "results/embed_pca.pdf",
        explained_variance = "results/explained_variance_pca.csv"
    params:
        components = 10
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --alignment {input.alignment} \
            --cluster-data {input.cluster} \
            --random-seed 314159 \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --components {params.components} \
            --explained-variance {output.explained_variance}
        """


rule embed_tsne:
    message: "Creating the embedding (dataframe, node JSON) for t-SNE"
    input:
        distance_matrix = "results/distance_matrix.csv",
        cluster = "results/output_HDBSCAN.csv"
    output:
        node_data = "results/embed_t-sne.json",
        dataframe = "results/embed_t-sne.csv",
        figure = "results/embed_t-sne.pdf"
    params:
        perplexity = 25.95,
        learning_rate = 200
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed 314159 \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne \
            --perplexity {params.perplexity} \
            --learning-rate {params.learning_rate}
        """

rule embed_umap:
    message: "Creating the embedding (dataframe, node JSON) for UMAP"
    input:
        distance_matrix = "results/distance_matrix.csv",
        cluster = "results/output_HDBSCAN.csv"
    output:
        node_data = "results/embed_umap.json",
        dataframe = "results/embed_umap.csv",
        figure = "results/embed_umap.pdf"
    params:
        nearest_neighbors = 200,
        min_dist = .5
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed 314159 \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap \
            --nearest-neighbors {params.nearest_neighbors} \
            --min-dist {params.min_dist}
        """

rule embed_mds:
    message: "Creating the embedding (dataframe, node JSON) for MDS"
    input:
        distance_matrix = "results/distance_matrix.csv",
        cluster = "results/output_HDBSCAN.csv"
    output:
        node_data = "results/embed_mds.json",
        dataframe = "results/embed_mds.csv",
        figure = "results/embed_mds.pdf"
    params:
        components = 2
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed 314159 \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds \
            --components {params.components} \
        """

def _get_embedding_columns_by_wildcards(wildcards):
    method = wildcards.method.replace("-", "")

    if method in ("pca"):
        return f"{method}1 {method}2 {method}3 {method}4"
    if method in ("mds"):
        return f"{method}1 {method}2"
    else:
        return f"{method}_x {method}_y"

rule export:
    input:
        tree="results/tree.nwk",
        metadata="data/global-xsmall_metadata.tsv.xz",
        branch_lengths="results/branch_lengths.json",
        embeddings=expand("results/embed_{embedding}.json", embedding=EMBEDDING_METHODS),
        clades = "results/clades.json",
        auspice_config="config/auspice_config.json",
        lat_longs="config/lat_longs.tsv",
    output:
        auspice_tree="../auspice/cartography_ncov.json",
    log:
        "logs/export.txt"
    benchmark:
        "benchmarks/export.txt"
    resources:
        # Memory use scales primarily with the size of the metadata file.
        mem_mb=lambda wildcards, input: 15 * int(input.metadata.size / 1024 / 1024)
    conda:
        config["conda_environment"]
    params:
        color_by_metadata=config["export"]["color_by_metadata"]
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.embeddings} {input.clades} \
            --auspice-config {input.auspice_config} \
            --color-by-metadata {params.color_by_metadata} \
            --lat-longs {input.lat_longs} \
            --output {output.auspice_tree} 2>&1 | tee {log}
        """

rule tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input: 
        tree = rules.export.output.auspice_tree
    output:
        table = "results/table.tsv"
    params:
        attributes = "num_date pca1 pca2 pca3 pca4 mds1 mds2 tsne_x tsne_y umap_x umap_y clade_membership pca_label mds_label umap_label t-sne_label pca_label_default mds_label_default umap_label_default t-sne_label_default"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --attributes {params.attributes}
        """

rule scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix = "results/distance_matrix.csv",
        embedding = "results/embed_{method}.csv",
    output:
        figure = "results/scatterplot_{method}.png",
        dataframe = "results/scatterplot_{method}.csv",
        metadata = "results/scatterplot_{method}_metadata.csv"
    params:
        bootstrap = 100,
        columns = _get_embedding_columns_by_wildcards
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --columns {params.columns} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

def _get_embedding_path_by_wildcards(wildcards):
    method = wildcards.method

    if method in ("pca", "mds", "t-sne", "umap"):
        return f"results/embed_{method}.csv"
    else:
        return "results/distance_matrix.csv"

rule KDE_density:
    message: "creating the KDE density plot"
    input:
        embedding = _get_embedding_path_by_wildcards,
        clades = "results/clades.json",
    output:
        figure = "results/KDEDensity_{method}.png",
        dataframe = "results/KDEDensity_{method}.csv",
        metadata = "results/KDEDensity_{method}_metadata.csv"
    params:
        embedding_columns = _get_embedding_columns_by_wildcards,
        differentiator_column = "clade_membership"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/within_vs_between_status.py \
            --embedding {input.embedding} \
            --clades {input.clades} \
            --method {wildcards.method} \
            --embedding-columns {params.embedding_columns} \
            --differentiator-column {params.differentiator_column} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule concat_KDE_table:
    message: "concatenating all the KDE data into one csv dataframe"
    input:
       dataframe_pca = "results/KDEDensity_pca_metadata.csv",
       dataframe_mds = "results/KDEDensity_mds_metadata.csv", 
       dataframe_tsne = "results/KDEDensity_t-sne_metadata.csv", 
       dataframe_umap = "results/KDEDensity_umap_metadata.csv",
       dataframe_genetic = "results/KDEDensity_genetic_metadata.csv"
    output:
        metadata = "results/full_KDE_metadata.csv"
    params:
        column = "MCC",
        dataframes = "results/KDEDensity_pca_metadata.csv results/KDEDensity_mds_metadata.csv results/KDEDensity_t-sne_metadata.csv results/KDEDensity_umap_metadata.csv results/KDEDensity_genetic_metadata.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/concatenate_tables.py \
            --tables {params.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule concat_scatterplot_table:
    message: "concatenating all the scatterplot metadata into one csv dataframe"
    input:
       dataframe_pca = "results/scatterplot_pca_metadata.csv",
       dataframe_mds = "results/scatterplot_mds_metadata.csv", 
       dataframe_tsne = "results/scatterplot_t-sne_metadata.csv", 
       dataframe_umap = "results/scatterplot_umap_metadata.csv"
    output:
        metadata = "results/full_Scatterplot_metadata.csv"
    params:
        column = "pearson_coef",
        dataframes = "results/scatterplot_pca_metadata.csv results/scatterplot_mds_metadata.csv results/scatterplot_t-sne_metadata.csv results/scatterplot_umap_metadata.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/concatenate_tables.py \
            --tables {params.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """


rule cluster_embeddings:
    message: "finding the optimal HDBSCAN distance thresholds for the embeddings"
    input:
        alignment = "results/global-xsmall_alignment.fasta",
        metadata = "results/clades.json",
        distance_matrix = "results/distance_matrix.csv"
    output:
        dataframe_full = "results/full_output_HDBSCAN.csv",
        dataframe = "results/output_HDBSCAN.csv",
        figure = "results/accuracy_figure_HDBSCAN.png",
    params:
        clade_column = "clade_membership"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        python3 ../notebooks/scripts/cluster_results.py \
            --distance-matrix {input.distance_matrix} \
            --alignment {input.alignment} \
            --clades {input.metadata} \
            --column-metadata {params.clade_column} \
            --output {output.dataframe} \
            --output-full {output.dataframe_full} \
            --output-figure {output.figure} \
        """

rule create_notebook_docs:
    message: "creating linked and grouped charts using the jupyter notebook"
    input:
        colors = "../notebooks/config/color_schemes.tsv",

        #Charts, tree:
        node_df = "results/table.tsv",

        pca_df = "results/embed_pca.csv",
        explained_variance_pca = "results/explained_variance_pca.csv",

        mds_df = "results/embed_mds.csv",
        tsne_df = "results/embed_t-sne.csv",
        umap_df = "results/embed_umap.csv",

        #Scatterplot:
        scatterplot_pca = "results/scatterplot_pca.csv",
        scatterplot_pca_metadata = "results/scatterplot_pca_metadata.csv",

        scatterplot_mds = "results/scatterplot_mds.csv",
        scatterplot_mds_metadata = "results/scatterplot_mds_metadata.csv",

        scatterplot_tsne = "results/scatterplot_t-sne.csv",
        scatterplot_tsne_metadata = "results/scatterplot_t-sne_metadata.csv",

        scatterplot_umap = "results/scatterplot_umap.csv",
        scatterplot_umap_metadata = "results/scatterplot_umap_metadata.csv",

        #KDE Density:
        KDE_pca = "results/KDEDensity_pca.csv",
        KDE_pca_metadata = "results/KDEDensity_pca_metadata.csv",

        KDE_mds = "results/KDEDensity_mds.csv",
        KDE_mds_metadata = "results/KDEDensity_mds_metadata.csv",

        KDE_tsne = "results/KDEDensity_t-sne.csv",
        KDE_tsne_metadata = "results/KDEDensity_t-sne_metadata.csv",

        KDE_umap = "results/KDEDensity_umap.csv",
        KDE_umap_metadata = "results/KDEDensity_umap_metadata.csv",

        KDE_genetic = "results/KDEDensity_genetic.csv",
        KDE_genetic_metadata = "results/KDEDensity_genetic_metadata.csv",

    output:
        KDE_density = "../docs/FullKDEDensitySars-cov-2.png",
        Scatterplot = "../docs/FullScatterplotSars-cov-2.png",
        fullChart = "../docs/FullLinkedChartBrushableSars-cov-2.html",
        fullChartPNG = "../docs/sars-cov-2-embeddings.png",
        PCA_Supplement = "../docs/FullPCABrushSupplementSars-cov-2.html",
        PCA_Supplement_PNG = "../docs/FullPCABrushSupplementSars-cov-2.png",
        Explained_variance_PCA = "../docs/explainedVarianceSars-cov-2.png",
        fullChartHDBSCAN = "../docs/fullHDBSCANChartSars-cov-2.html",
        fullChartHDBSCANPNG = "../docs/fullHDBSCANChartSars-cov-2.png"

    conda: "../cartography.yml"
    notebook:
        "2021-05-11FinalNotebookSars.ipynb"

rule clean:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice"
    conda: "../cartography.yml"
    shell:
        "rm -rfv {params}"

#rule embed_alignment:
#    input:
#        alignment="results/global-xsmall_alignment.fasta",
#    output:
#        node_data="results/{embedding}.json",
#        figure="results/{embedding}.pdf",
#    conda:
#        config["conda_environment"]
#    params:
#        embedding_params=lambda wildcards: config.get("embed_alignment", {}).get(wildcards.embedding, "")
#    shell:
#        """
#        python3 ../notebooks/scripts/embed.py \
#            --alignment {input.alignment} \
#            --output-node-data {output.node_data} \
#            --output-figure {output.figure} \
#            {wildcards.embedding} {params.embedding_params}
#        """

