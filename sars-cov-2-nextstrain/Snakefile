METHOD_PARAMETERS = Paramspace(
    pd.read_csv(
        "sars-cov-2-nextstrain/config/method_parameters.tsv",
        sep="\t"
    )
)

rule sarscov2:
    input:
        "auspice/cartography_ncov.json",
        expand("sars-cov-2-nextstrain/results/scatterplot_{method}.png", method=EMBEDDING_METHODS),
        "sars-cov-2-nextstrain/results/distance_matrix.csv",
        "sars-cov-2-nextstrain/results/embed_pca.pdf",
        "sars-cov-2-nextstrain/results/embed_t-sne.pdf",
        "sars-cov-2-nextstrain/results/embed_umap.pdf",
        "sars-cov-2-nextstrain/results/embed_mds.pdf",
        "sars-cov-2-nextstrain/results/table.tsv",
        "sars-cov-2-nextstrain/results/full_Scatterplot_metadata.csv",
        "sars-cov-2-nextstrain/results/explained_variance_pca.csv",
        "docs/FullScatterplotSars-cov-2.png",
        "docs/FullLinkedChartBrushableSars-cov-2.html",
        "docs/sars-cov-2-embeddings.png",
        "docs/FullPCABrushSupplementSars-cov-2.html",
        "sars-cov-2-nextstrain/results/alignment_pi.txt",
        "docs/explainedVarianceSars-cov-2.png",
        "docs/bases_missing_vs_pc1_Sars.png",
        "docs/fullHDBSCANChartSars-cov-2.png",
        "sars-cov-2-nextstrain/results/mcc_by_method_and_distance_threshold.pdf",
        "sars-cov-2-nextstrain/results/full_HDBSCAN_metadata.csv",
        expand("sars-cov-2-nextstrain/results/HDBSCAN_metadata_{method}.csv", method=EMBEDDING_METHODS)

rule annotate_low_quality:
    input:
        metadata="sars-cov-2-nextstrain/data/metadata.tsv.xz"
    output:
        output ="sars-cov-2-nextstrain/results/metadata_low_quality.tsv"
    conda: "../cartography.yml"
    shell:
        """
        python3 sars-cov-2-nextstrain/scripts/bad_samples.py \
            --metadata {input.metadata} \
            --output {output.output}
        """

rule embed_pca_before:
    message: "Creating the embedding for PCA bases missing analysis"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_pca_before.csv",
    params:
        random_seed = RANDOM_SEED,
        components = 10,
    conda: "../cartography.yml"
    shell:
        """
        xz -c -d {input.alignment} | embed \
            --alignment /dev/stdin \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            pca \
            --components {params.components}
        """

rule bases_missing_vs_pc1:
    message: "creating a bases_missing vs PC1 graph"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz",
        pca = "sars-cov-2-nextstrain/results/embed_pca_before.csv",
        metadata = "sars-cov-2-nextstrain/results/metadata_low_quality.tsv"
    output:
        figure = "docs/bases_missing_vs_pc1_Sars.png"
    params:
        bootstrap = 100
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/pc1_vs_bases_missing.py \
            --alignment {input.alignment} \
            --embedding {input.pca} \
            --method pca \
            --metadata {input.metadata} \
            --bootstrapping-sample {params.bootstrap} \
            --output {output.figure}
        """

rule impute_data:
    message: "creating an imputed dataframe/fasta file"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz"
    output:
        dataframe = "sars-cov-2-nextstrain/results/imputed_alignment.csv",
        fasta = "sars-cov-2-nextstrain/results/imputed_alignment.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/impute_data.py \
            --alignment {input.alignment} \
            --output-dataframe {output.dataframe} \
            --output-fasta {output.fasta}
        """

# Calculate nucleotide diversity by calling SNPs (with monomorphic sites) and
# using Pixy to calculate unbiased value of Pi.
rule uncompress_alignment:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta.xz",
    output:
        alignment=temp("sars-cov-2-nextstrain/data/aligned.fasta"),
    conda: "../cartography.yml"
    shell:
        """
        xz -c -d {input.alignment} > {output.alignment}
        """

rule call_snps:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta",
    output:
        snps="sars-cov-2-nextstrain/results/snps.vcf",
    conda: "../cartography.yml"
    shell:
        """
        snp-sites -b -v {input.alignment} > {output.snps}
        """

rule fix_alt_snps:
    input:
        snps="sars-cov-2-nextstrain/results/snps.vcf",
    output:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf",
    run:
        with open(input.snps, "r", encoding="utf-8") as fh:
            with open(output.snps, "w", encoding="utf-8") as oh:
                for line in fh:
                    if not line.startswith("#"):
                        pieces = line.split("\t")
                        if len(pieces) >= 5:
                            # Replace ALT values of "*" from snp-sites with
                            # standard "." values.
                            alt = pieces[4].split(",")
                            new_alt = ",".join([
                                "." if allele == "*" else allele
                                for allele in alt
                            ])
                            pieces[4] = new_alt

                        line = "\t".join(pieces)

                    oh.write(line)

rule compress_and_index_snps:
    input:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf",
    output:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf.gz",
    conda: "../cartography.yml"
    shell:
        """
        bgzip -c {input.snps} > {output.snps};
        tabix {output.snps}
        """

rule build_population_file:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta.xz",
    output:
        populations="sars-cov-2-nextstrain/results/populations.txt",
    conda: "../cartography.yml"
    shell:
        """
        xz -c -d {input.alignment} | grep "^>" | sed 's/>//' | awk 'OFS="\\t" {{ print $1,"virus" }}' > {output.populations}
        """

rule nucleotide_diversity:
    input:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf.gz",
        populations="sars-cov-2-nextstrain/results/populations.txt",
    output:
        output = "sars-cov-2-nextstrain/results/alignment_pi.txt"
    params:
        window_size=30000,
        output_prefix="alignment",
        output_dir="sars-cov-2-nextstrain/results",
    conda: "../cartography.yml"
    shell:
        """
        pixy \
            --stats pi \
            --vcf {input.snps} \
            --populations {input.populations} \
            --window_size {params.window_size} \
            --output_folder {params.output_dir} \
            --output_prefix {params.output_prefix}
        """

rule make_clades:
    message: "creating the clades file to be used in the rest of the analysis"
    input:
        metadata = "sars-cov-2-nextstrain/data/metadata.tsv.xz"
    output:
        output = "sars-cov-2-nextstrain/results/clades.json"
    params:
        col_name = "Nextstrain_clade"
    shell:
        """
        python3 notebooks/scripts/make_clades.py \
            --metadata {input.metadata} \
            --output {output.output} \
            --col-name {params.col_name}
        """

rule create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz",
    output:
        output = "sars-cov-2-nextstrain/results/distance_matrix.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule cluster_by_parameters:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta.xz",
        distance_matrix="sars-cov-2-nextstrain/results/distance_matrix.csv",
        clades="sars-cov-2-nextstrain/results/clades.json",
    output:
        table=f"sars-cov-2-nextstrain/results/gridsearch/{METHOD_PARAMETERS.wildcard_pattern}.tsv",
    params:
        method_parameters=METHOD_PARAMETERS.instance,
    conda: "../cartography.yml"
    script:
        "../notebooks/scripts/cluster_by_parameters.py"

rule aggregate_clusters_by_parameters:
    input:
        tables=expand("sars-cov-2-nextstrain/results/gridsearch/{params}.tsv", params=METHOD_PARAMETERS.instance_patterns)
    output:
        table="sars-cov-2-nextstrain/results/gridsearch.tsv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --output {output.table}
        """

rule output_grid_search:
    input:
        table= "sars-cov-2-nextstrain/results/gridsearch.tsv",
    output:
        pca_parameters = "sars-cov-2-nextstrain/results/pca_parameters.csv",
        mds_parameters = "sars-cov-2-nextstrain/results/mds_parameters.csv",
        tsne_parameters = "sars-cov-2-nextstrain/results/t-sne_parameters.csv",
        umap_parameters = "sars-cov-2-nextstrain/results/umap_parameters.csv",
        mcc_by_tsne_parameters = "sars-cov-2-nextstrain/results/mcc_by_t-sne_parameters.pdf",
        mcc_by_umap_parameters = "sars-cov-2-nextstrain/results/mcc_by_umap_parameters.pdf",
        mcc_by_mds_parameters = "sars-cov-2-nextstrain/results/mcc_by_mds_parameters.pdf",
        mcc_by_method_and_distance_threshold = "sars-cov-2-nextstrain/results/mcc_by_method_and_distance_threshold.pdf"
    conda: "../cartography.yml"
    log:
        "logs/summarize-grid-search.ipynb"
    notebook:
        "notebooks/2021-06-23-summarize-grid-search.ipynb"

rule embed_pca:
    message: "Creating the embedding (dataframe, node JSON) for PCA"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz",
        cluster = "sars-cov-2-nextstrain/results/pca_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_pca.csv",
        figure = "sars-cov-2-nextstrain/results/embed_pca.pdf",
        explained_variance = "sars-cov-2-nextstrain/results/explained_variance_pca.csv"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        xz -c -d {input.alignment} | embed \
            --alignment /dev/stdin \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance}
        """

rule embed_mds:
    message: "Creating the embedding (dataframe, node JSON) for MDS"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        cluster = "sars-cov-2-nextstrain/results/mds_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_mds.csv",
        figure = "sars-cov-2-nextstrain/results/embed_mds.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule embed_tsne:
    message: "Creating the embedding (dataframe, node JSON) for t-SNE"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        cluster = "sars-cov-2-nextstrain/results/t-sne_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_t-sne.csv",
        figure = "sars-cov-2-nextstrain/results/embed_t-sne.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne
        """

rule embed_umap:
    message: "Creating the embedding (dataframe, node JSON) for UMAP"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        cluster = "sars-cov-2-nextstrain/results/umap_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_umap.csv",
        figure = "sars-cov-2-nextstrain/results/embed_umap.pdf"
    params:
        random_seed = RANDOM_SEED,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule create_node_output:
    message: "creates node output that is used by augur to create the phylogenies"
    input:
        dataframe = "sars-cov-2-nextstrain/results/embed_{method}.csv"
    output:
        node_data = "sars-cov-2-nextstrain/results/embed_{method}.json"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule annotate_tree:
    input:
        tree="sars-cov-2-nextstrain/data/ncov_open_global.json",
        embeddings=expand("sars-cov-2-nextstrain/results/embed_{embedding}.json", embedding=EMBEDDING_METHODS),
    output:
        auspice_tree="auspice/cartography_ncov.json",
    log:
        "logs/sars-cov-2_annotate_tree.txt",
    benchmark:
        "benchmarks/sars-cov-2_annotate_tree.txt",
    conda: "../cartography.yml"
    shell:
        """
        python3 sars-cov-2-nextstrain/scripts/annotate_tree.py \
            --tree {input.tree} \
            --node-data {input.embeddings} \
            --output {output.auspice_tree}
        """

rule tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input:
        tree = rules.annotate_tree.output.auspice_tree
    output:
        table = "sars-cov-2-nextstrain/results/table.tsv"
    params:
        attributes = "num_date pca1 pca2 pca3 pca4 pca5 pca6 pca7 pca8 pca9 pca10 mds1 mds2 mds3 mds4 tsne_x tsne_y umap_x umap_y clade_membership pango_lineage pca_label mds_label umap_label t-sne_label pca_label_default mds_label_default umap_label_default t-sne_label_default"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --attributes {params.attributes}
        """

rule scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        embedding = "sars-cov-2-nextstrain/results/embed_{method}.csv",
    output:
        figure = "sars-cov-2-nextstrain/results/scatterplot_{method}.png",
        dataframe = "sars-cov-2-nextstrain/results/scatterplot_{method}.csv",
        metadata = "sars-cov-2-nextstrain/results/scatterplot_{method}_metadata.csv"
    params:
        bootstrap = 100,
        columns = _get_embedding_columns_by_wildcards
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --columns {params.columns} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule cluster_metadata:
    message: "Creating the metadata dataframe for HDBSCAN results for main paper"
    input:
        embedding = "sars-cov-2-nextstrain/results/embed_{method}.csv",
        metadata = "sars-cov-2-nextstrain/results/table.tsv",
        cluster = "sars-cov-2-nextstrain/results/{method}_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/HDBSCAN_metadata_{method}.csv",
    conda: "../cartography.yml"
    params:
        method = "{method}"
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {params.method} \
            --embedding {input.embedding} \
            --metadata {input.metadata} \
            --cluster-data {input.cluster} \
            --output {output.dataframe}
        """

rule concat_HDBSCAN_table:
    message: "concatenating all the HDBSCAN data into one csv dataframe"
    input:
       dataframe_pca = "sars-cov-2-nextstrain/results/HDBSCAN_metadata_pca.csv",
       dataframe_mds = "sars-cov-2-nextstrain/results/HDBSCAN_metadata_mds.csv",
       dataframe_tsne = "sars-cov-2-nextstrain/results/HDBSCAN_metadata_t-sne.csv",
       dataframe_umap = "sars-cov-2-nextstrain/results/HDBSCAN_metadata_umap.csv",
    output:
        metadata = "sars-cov-2-nextstrain/results/full_HDBSCAN_metadata.csv"
    params:
        column = "MCC",
        dataframes = "sars-cov-2-nextstrain/results/HDBSCAN_metadata_pca.csv results/HDBSCAN_metadata_mds.csv results/HDBSCAN_metadata_t-sne.csv results/HDBSCAN_metadata_umap.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {params.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule concat_scatterplot_table:
    message: "concatenating all the scatterplot metadata into one csv dataframe"
    input:
       dataframe_pca = "sars-cov-2-nextstrain/results/scatterplot_pca_metadata.csv",
       dataframe_mds = "sars-cov-2-nextstrain/results/scatterplot_mds_metadata.csv",
       dataframe_tsne = "sars-cov-2-nextstrain/results/scatterplot_t-sne_metadata.csv",
       dataframe_umap = "sars-cov-2-nextstrain/results/scatterplot_umap_metadata.csv"
    output:
        metadata = "sars-cov-2-nextstrain/results/full_Scatterplot_metadata.csv"
    params:
        column = "pearson_coef",
        dataframes = "sars-cov-2-nextstrain/results/scatterplot_pca_metadata.csv results/scatterplot_mds_metadata.csv results/scatterplot_t-sne_metadata.csv results/scatterplot_umap_metadata.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {params.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule create_notebook_docs:
    message: "creating linked and grouped charts using the jupyter notebook"
    input:
        colors = "notebooks/config/color_schemes.tsv",

        #Charts, tree:
        node_df = "sars-cov-2-nextstrain/results/table.tsv",

        pca_df = "sars-cov-2-nextstrain/results/embed_pca.csv",
        explained_variance_pca = "sars-cov-2-nextstrain/results/explained_variance_pca.csv",

        mds_df = "sars-cov-2-nextstrain/results/embed_mds.csv",
        tsne_df = "sars-cov-2-nextstrain/results/embed_t-sne.csv",
        umap_df = "sars-cov-2-nextstrain/results/embed_umap.csv",

        #Scatterplot:
        scatterplot_pca = "sars-cov-2-nextstrain/results/scatterplot_pca.csv",
        scatterplot_pca_metadata = "sars-cov-2-nextstrain/results/scatterplot_pca_metadata.csv",

        scatterplot_mds = "sars-cov-2-nextstrain/results/scatterplot_mds.csv",
        scatterplot_mds_metadata = "sars-cov-2-nextstrain/results/scatterplot_mds_metadata.csv",

        scatterplot_tsne = "sars-cov-2-nextstrain/results/scatterplot_t-sne.csv",
        scatterplot_tsne_metadata = "sars-cov-2-nextstrain/results/scatterplot_t-sne_metadata.csv",

        scatterplot_umap = "sars-cov-2-nextstrain/results/scatterplot_umap.csv",
        scatterplot_umap_metadata = "sars-cov-2-nextstrain/results/scatterplot_umap_metadata.csv",
    output:
        Scatterplot = "docs/FullScatterplotSars-cov-2.png",
        fullChart = "docs/FullLinkedChartBrushableSars-cov-2.html",
        fullChartPNG = "docs/sars-cov-2-embeddings.png",
        PCA_Supplement = "docs/FullPCABrushSupplementSars-cov-2.html",
        PCA_Supplement_PNG = "docs/FullPCABrushSupplementSars-cov-2.png",
        Explained_variance_PCA = "docs/explainedVarianceSars-cov-2.png",
        fullChartHDBSCAN = "docs/fullHDBSCANChartSars-cov-2.html",
        fullChartHDBSCANPNG = "docs/fullHDBSCANChartSars-cov-2.png"

    conda: "../cartography.yml"
    notebook:
        "2021-05-11FinalNotebookSars.ipynb"
