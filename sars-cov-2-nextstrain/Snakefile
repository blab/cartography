rule sarscov2:
    input:
        "docs/figures/sarscov2-embeddings-by-clade.html",
        "docs/figures/sarscov2-embeddings-by-clade.png",
        "docs/figures/sarscov2-embeddings-by-cluster.html",
        "docs/figures/sarscov2-embeddings-by-cluster.png",
        "docs/figures/sarscov2-pca-explained-variance.png",
        "docs/figures/sarscov2-pca-by-clade.html",
        "docs/figures/sarscov2-pca-by-clade.png",
        "docs/figures/sarscov2-euclidean-distance-by-genetic-distance.png",
        "sars-cov-2-nextstrain/results/alignment_pi.txt",
        "docs/figures/sarscov2-pc1-vs-bases-missing.png",
        "auspice/cartography_ncov.json",
        "sars-cov-2-nextstrain/results/mutation_table.csv",

rule sarscov2_embed_pca_before:
    message: "Creating the embedding for PCA bases missing analysis"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_pca_before.csv",
        figure = "sars-cov-2-nextstrain/results/embed_pca_before.pdf",
    params:
        random_seed = RANDOM_SEED,
        components = 10,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --components {params.components}
        """

rule sarscov2_bases_missing_vs_pc1:
    message: "creating a bases_missing vs PC1 graph"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz",
        metadata = "sars-cov-2-nextstrain/data/metadata.tsv.xz",
        pca = "sars-cov-2-nextstrain/results/embed_pca_before.csv",
    output:
        figure = "docs/figures/sarscov2-pc1-vs-bases-missing.png"
    params:
        bootstrap = 100,
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/pc1_vs_bases_missing.py \
            --alignment {input.alignment} \
            --embedding {input.pca} \
            --method pca \
            --metadata {input.metadata} \
            --bootstrapping-sample {params.bootstrap} \
            --output {output.figure}
        """

# Calculate nucleotide diversity by calling SNPs (with monomorphic sites) and
# using Pixy to calculate unbiased value of Pi.
rule sarscov2_uncompress_alignment:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta.xz",
    output:
        alignment=temp("sars-cov-2-nextstrain/data/aligned.fasta"),
    conda: "../cartography.yml"
    shell:
        """
        xz -c -d {input.alignment} > {output.alignment}
        """

rule sarscov2_call_snps:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta",
    output:
        snps="sars-cov-2-nextstrain/results/snps.vcf",
    conda: "../cartography.yml"
    shell:
        """
        snp-sites -b -v {input.alignment} > {output.snps}
        """

rule sarscov2_fix_alt_snps:
    input:
        snps="sars-cov-2-nextstrain/results/snps.vcf",
    output:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf",
    run:
        with open(input.snps, "r", encoding="utf-8") as fh:
            with open(output.snps, "w", encoding="utf-8") as oh:
                for line in fh:
                    if not line.startswith("#"):
                        pieces = line.split("\t")
                        if len(pieces) >= 5:
                            # Replace ALT values of "*" from snp-sites with
                            # standard "." values.
                            alt = pieces[4].split(",")
                            new_alt = ",".join([
                                "." if allele == "*" else allele
                                for allele in alt
                            ])
                            pieces[4] = new_alt

                        line = "\t".join(pieces)
                    elif line[:2] == "##":
                        # Skip header lines other than the #CHROM line, since
                        # Pixy complains about these as being "invalid".
                        continue

                    oh.write(line)

rule sarscov2_compress_and_index_snps:
    input:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf",
    output:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf.gz",
    conda: "../cartography.yml"
    shell:
        """
        bgzip -c {input.snps} > {output.snps};
        tabix {output.snps}
        """

rule sarscov2_build_population_file:
    input:
        alignment="sars-cov-2-nextstrain/data/aligned.fasta",
    output:
        populations="sars-cov-2-nextstrain/results/populations.txt",
    conda: "../cartography.yml"
    shell:
        """
        grep "^>" {input.alignment} | sed 's/>//' | awk 'OFS="\\t" {{ print $1,"virus" }}' > {output.populations}
        """

rule sarscov2_nucleotide_diversity:
    input:
        snps="sars-cov-2-nextstrain/results/snps_cleaned.vcf.gz",
        populations="sars-cov-2-nextstrain/results/populations.txt",
    output:
        output = "sars-cov-2-nextstrain/results/alignment_pi.txt"
    params:
        window_size=30000,
        output_prefix="alignment",
        output_dir="sars-cov-2-nextstrain/results",
    conda: "../cartography.yml"
    shell:
        """
        pixy \
            --stats pi \
            --vcf {input.snps} \
            --populations {input.populations} \
            --window_size {params.window_size} \
            --output_folder {params.output_dir} \
            --output_prefix {params.output_prefix};

        rm -f sars-cov-2-nextstrain/results/pixy*.tmp
        """

rule sarscov2_make_clades:
    message: "creating the clades file to be used in the rest of the analysis"
    input:
        metadata = "sars-cov-2-nextstrain/data/metadata.tsv.xz"
    output:
        output = "sars-cov-2-nextstrain/results/clades.json"
    params:
        col_name = "Nextstrain_clade"
    shell:
        """
        python3 notebooks/scripts/make_clades.py \
            --metadata {input.metadata} \
            --output {output.output} \
            --col-name {params.col_name}
        """

rule sarscov2_create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta.xz",
    output:
        output = "sars-cov-2-nextstrain/results/distance_matrix.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --indel-distance \
            --output {output.output}
        """

rule sarscov2_embed_pca:
    message: "Creating the embedding (dataframe, node JSON) for PCA"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta",
        cluster = "simulations/coronavirus-like/moderate-recombination-rate/pca_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_pca.csv",
        figure = "sars-cov-2-nextstrain/results/embed_pca.pdf",
        explained_variance = "sars-cov-2-nextstrain/results/explained_variance_pca.csv"
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            pca \
            --explained-variance {output.explained_variance}
        """

rule sarscov2_embed_mds:
    message: "Creating the embedding (dataframe, node JSON) for MDS"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        cluster = "simulations/coronavirus-like/moderate-recombination-rate/mds_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_mds.csv",
        figure = "sars-cov-2-nextstrain/results/embed_mds.pdf"
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds
        """

rule sarscov2_embed_tsne:
    message: "Creating the embedding (dataframe, node JSON) for t-SNE"
    input:
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta",
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        cluster = "simulations/coronavirus-like/moderate-recombination-rate/t-sne_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_t-sne.csv",
        figure = "sars-cov-2-nextstrain/results/embed_t-sne.pdf"
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            t-sne
        """

rule sarscov2_embed_umap:
    message: "Creating the embedding (dataframe, node JSON) for UMAP"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        cluster = "simulations/coronavirus-like/moderate-recombination-rate/umap_parameters.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/embed_umap.csv",
        figure = "sars-cov-2-nextstrain/results/embed_umap.pdf",
    params:
        random_seed = RANDOM_SEED,
        cluster_threshold = CLUSTER_THRESHOLD,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --cluster-threshold {params.cluster_threshold} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            umap
        """

rule sarscov2_create_node_output:
    message: "creates node output that is used by augur to create the phylogenies"
    input:
        dataframe = "sars-cov-2-nextstrain/results/embed_{method}.csv"
    output:
        node_data = "sars-cov-2-nextstrain/results/embed_{method}.json"
    shell:
        """
        python3 notebooks/scripts/output_node_data.py \
            --table {input.dataframe} \
            --output {output.node_data}
        """

rule sarscov2_annotate_tree:
    input:
        tree="sars-cov-2-nextstrain/data/ncov_open_global.json",
        embeddings=expand("sars-cov-2-nextstrain/results/embed_{embedding}.json", embedding=EMBEDDING_METHODS),
    output:
        auspice_tree="auspice/cartography_ncov.json",
    log:
        "logs/sars-cov-2_annotate_tree.txt",
    benchmark:
        "benchmarks/sars-cov-2_annotate_tree.txt",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/annotate_tree.py \
            --tree {input.tree} \
            --node-data {input.embeddings} \
            --output {output.auspice_tree}
        """

rule sarscov2_tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input:
        tree = "auspice/cartography_ncov.json",
    output:
        table = "sars-cov-2-nextstrain/results/table.tsv"
    params:
        attributes = "num_date clade_membership pango_lineage"
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --attributes {params.attributes}
        """

rule sarscov2_create_distance_dataframe:
    input:
        dataframe_pca = "sars-cov-2-nextstrain/results/embed_pca.csv",
        dataframe_mds = "sars-cov-2-nextstrain/results/embed_mds.csv",
        dataframe_tsne = "sars-cov-2-nextstrain/results/embed_t-sne.csv",
        dataframe_umap = "sars-cov-2-nextstrain/results/embed_umap.csv",
    output:
        metadata = "sars-cov-2-nextstrain/results/embedding_data.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/make_table.py \
            --tables {input} \
            --separator ',' \
            --output {output.metadata}
        """

rule sarscov2_training_annotate_embeddings:
    input:
        left="sars-cov-2-nextstrain/results/table.tsv",
        right="sars-cov-2-nextstrain/results/embedding_data.csv",
    output:
        table="sars-cov-2-nextstrain/results/annotated_embeddings.tsv",
    conda: "../cartography.yml"
    params:
        join_on="strain",
    shell:
        """
        python3 notebooks/scripts/join_tables.py \
            --left {input.left} \
            --right {input.right} \
            --on {params.join_on} \
            --output {output.table}
        """

rule sarscov2_scatterplot:
    message: "Creating the scatterplot (PNG, dataframe)"
    input:
        distance_matrix = "sars-cov-2-nextstrain/results/distance_matrix.csv",
        embedding = "sars-cov-2-nextstrain/results/embed_{method}.csv",
        method_parameters = "simulations/coronavirus-like/moderate-recombination-rate/{method}_parameters.csv",
    output:
        figure = "sars-cov-2-nextstrain/results/scatterplot_{method}.png",
        dataframe = "sars-cov-2-nextstrain/results/scatterplot_{method}.csv",
        metadata = "sars-cov-2-nextstrain/results/scatterplot_{method}_metadata.csv"
    params:
        bootstrap = 100,
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/scatterplot.py \
            --distance {input.distance_matrix} \
            --embedding {input.embedding} \
            --method {wildcards.method} \
            --method-parameters {input.method_parameters} \
            --bootstrapping-sample {params.bootstrap} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule sarscov2_cluster_accuracy:
    input:
        metadata = "sars-cov-2-nextstrain/results/table.tsv",
        embedding = "sars-cov-2-nextstrain/results/embed_{method}.csv",
    output:
        dataframe = "sars-cov-2-nextstrain/results/cluster_accuracy_{method}.csv",
    params:
        clade_column="pango_lineage",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/metadata_HDBSCAN.py \
            --method {wildcards.method} \
            --true-clusters {input.metadata} \
            --true-clusters-column {params.clade_column:q} \
            --predicted-clusters {input.embedding} \
            --predicted-clusters-column "{wildcards.method}_label" \
            --ignored-clusters "-1" "unassigned" "None" "unclassifiable" "" \
            --output {output.dataframe}
        """

rule sarscov2_concat_HDBSCAN_table:
    input:
        accuracies=expand("seasonal-flu-nextstrain/results/cluster_accuracy_{method}.csv", method=EMBEDDING_METHODS)
    output:
        metadata = "sars-cov-2-nextstrain/results/full_HDBSCAN_metadata.csv",
    params:
        column = "normalized_vi",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.accuracies} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule sarscov2_concat_scatterplot_table:
    input:
       dataframe_pca = "sars-cov-2-nextstrain/results/scatterplot_pca_metadata.csv",
       dataframe_mds = "sars-cov-2-nextstrain/results/scatterplot_mds_metadata.csv",
       dataframe_tsne = "sars-cov-2-nextstrain/results/scatterplot_t-sne_metadata.csv",
       dataframe_umap = "sars-cov-2-nextstrain/results/scatterplot_umap_metadata.csv",
    output:
        metadata = "sars-cov-2-nextstrain/results/full_Scatterplot_metadata.csv",
    params:
        column = "pearson_coef",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.dataframe_pca} {input.dataframe_mds} {input.dataframe_tsne} {input.dataframe_umap} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule sarscov2_create_scatterplot_figure:
    input:
        scatterplot_metadata="sars-cov-2-nextstrain/results/full_Scatterplot_metadata.csv",
        scatterplot_pca = "sars-cov-2-nextstrain/results/scatterplot_pca.csv",
        scatterplot_mds = "sars-cov-2-nextstrain/results/scatterplot_mds.csv",
        scatterplot_tsne = "sars-cov-2-nextstrain/results/scatterplot_t-sne.csv",
        scatterplot_umap = "sars-cov-2-nextstrain/results/scatterplot_umap.csv",
    output:
        scatterplot = "docs/figures/sarscov2-euclidean-distance-by-genetic-distance.png",
    conda: "../cartography.yml"
    notebook:
        "../notebooks/2022-09-26-scatterplot-figure.py.ipynb"

rule sarscov2_create_mutation_table:
    input:
        reference = "sars-cov-2-nextstrain/config/reference_sars-cov-2.fasta",
        alignment = "sars-cov-2-nextstrain/data/aligned.fasta",
        embedding = "sars-cov-2-nextstrain/results/embed_{method}.csv",
    output:
        table = "sars-cov-2-nextstrain/results/mutation_table_{method}.csv",
    params:
        min_allele_count=10,
    conda: "../cartography.yml"
    benchmark:
        "benchmarks/sarscov2_create_mutation_table_{method}.txt"
    log:
        "logs/sarscov2_create_mutation_table_{method}.txt"
    shell:
        """
        python3 notebooks/scripts/cluster_mutation.py \
            --reference-sequence {input.reference} \
            --alignment {input.alignment} \
            --metadata {input.embedding} \
            --metadata-column {wildcards.method}_label \
            --min-allele-count {params.min_allele_count} \
            --output {output.table} 2>&1 | tee {log}
        """

rule sarscov2_concat_mutation_tables:
    input:
        mutation_tables=expand("sars-cov-2-nextstrain/results/mutation_table_{method}.csv", method=EMBEDDING_METHODS),
    output:
        metadata = "sars-cov-2-nextstrain/results/mutation_table.csv",
    params:
        column = "metadata_column",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.mutation_tables} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """

rule sarscov2_create_notebook_docs:
    input:
        colors="notebooks/config/color_schemes.tsv",
        annotated_embeddings="sars-cov-2-nextstrain/results/annotated_embeddings.tsv",
        accuracy_table="sars-cov-2-nextstrain/results/full_HDBSCAN_metadata.csv",
        explained_variance_pca = "sars-cov-2-nextstrain/results/explained_variance_pca.csv",
    output:
        fullChart="docs/figures/sarscov2-embeddings-by-clade.html",
        fullChartPNG="docs/figures/sarscov2-embeddings-by-clade.png",
        fullChartHDBSCAN="docs/figures/sarscov2-embeddings-by-cluster.html",
        fullChartHDBSCANPNG="docs/figures/sarscov2-embeddings-by-cluster.png",
        Explained_variance_PCA="docs/figures/sarscov2-pca-explained-variance.png",
        PCA_Supplement="docs/figures/sarscov2-pca-by-clade.html",
        PCA_Supplement_PNG="docs/figures/sarscov2-pca-by-clade.png",
        MDS_Supplement="docs/figures/sarscov2-mds-by-clade.html",
        MDS_Supplement_PNG="docs/figures/sarscov2-mds-by-clade.png",
    params:
        clade_membership="pango_lineage",
    conda: "../cartography.yml"
    notebook:
        "2022-03-29-final-figures.py.ipynb"
