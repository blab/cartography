SIMULATION_METHOD_PARAMETERS = Paramspace(
    pd.read_csv(
        "simulations/method_parameters.tsv",
        sep="\t",
        dtype=str,
    )
)
SIMULATION_RECOMBINATION_RATES = ["low-recombination-rate", "moderate-recombination-rate", "high-recombination-rate"]
SIMULATION_REASSORTMENT_RATES = ["no-reassortment"]
SIMULATION_REPLICATES = list(range(1, 6))
SIMULATION_TOTAL_TRAIN_TEST_SPLITS = 10
SIMULATION_TRAIN_TEST_SPLITS = list(range(SIMULATION_TOTAL_TRAIN_TEST_SPLITS))
SIMULATION_GAP_BETWEEN_TRAIN_TEST_INFLUENZA = 200
SIMULATION_GAP_BETWEEN_TRAIN_TEST_CORONAVIRUS = 30
SIMULATION_TRAIN_TEST_SIZE_INFLUENZA = 800 # 4 years of flu-like evolution is 200 generations/year * 4 years.
SIMULATION_TRAIN_TEST_SIZE_CORONAVIRUS = 120 # 4 years of coronavirus-like evolution is 30 generations/year * 4 years.

rule simulations_all:
    input:
        "simulations/summary_scores_by_virus_reassortment_rate_and_method.csv",

rule simulations_run_simulation:
    input:
        simulation_config="simulations/{virus}-like/{recombination_rate}/simulation_config.xml",
    output:
        sequences="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/simulated_sequences.fasta",
    conda: "../cartography.yml"
    resources:
        mem_mb=5000,
    shell:
        """
        cd $(dirname {output.sequences}) && java -jar {SNAKEMAKE_DIR}/simulations/santa-sim/dist/santa.jar -seed={wildcards.replicate} {SNAKEMAKE_DIR}/{input.simulation_config}
        """

rule simulations_parse:
    input:
        sequences="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/simulated_sequences.fasta",
    output:
        aligned="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/aligned.fasta",
        metadata="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/complete_metadata.tsv",
    conda: "../cartography.yml"
    log:
        "logs/simulations_{virus}_parse_{recombination_rate}_{replicate}.txt"
    params:
        fasta_fields=["strain", "generation", "fitness", "is_recombinant"]
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --fields {params.fasta_fields} \
            --output-sequences {output.aligned} \
            --output-metadata {output.metadata} &> {log}
        """

rule simulations_filter:
    input:
        aligned="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/aligned.fasta",
        metadata="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/complete_metadata.tsv",
    output:
        filtered="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/filtered.fasta",
        metadata="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/metadata.tsv",
    conda: "../cartography.yml"
    log:
        "logs/simulations_{virus}_filter_{recombination_rate}_{replicate}.txt"
    params:
        # Filter the first 10 years of simulated populations.
        # For coronavirus-like populations, 30 generations = 1 year.
        # For influenza-like populations, 200 generations = 1 year.
        minimum_generations=lambda wildcards: 300 if wildcards.virus == "coronavirus" else 2000
    shell:
        """
        augur filter \
            --sequences {input.aligned} \
            --metadata {input.metadata} \
            --query "(generation > {params.minimum_generations})" \
            --output-sequences {output.filtered} \
            --output-metadata {output.metadata} 2>&1 | tee {log}
        """

rule simulations_create_distance_matrix:
    input:
        alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/filtered.fasta",
    output:
        output="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/distance_matrix.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

def _get_method_parameters_argument(wildcards):
    return " ".join([
        f"--{key.replace('_', '-')} {value}"
        for key, value in wildcards.items()
        if value != "nan" and key not in ["virus", "recombination_rate", "replicate", "method", "train_test_split", "training_or_test"]
    ])

rule simulations_grid_search_embed:
    input:
        alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/filtered.fasta",
        distance_matrix="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/distance_matrix.csv",
    output:
        embedding=f"simulations/{{virus}}-like/{{recombination_rate}}/replicate-{{replicate}}/gridsearch/embedding_{SIMULATION_METHOD_PARAMETERS.wildcard_pattern}.csv",
        figure=f"simulations/{{virus}}-like/{{recombination_rate}}/replicate-{{replicate}}/gridsearch/embedding_{SIMULATION_METHOD_PARAMETERS.wildcard_pattern}.pdf",
    params:
        random_seed=RANDOM_SEED,
        method_parameters_arg=_get_method_parameters_argument,
    resources:
        runtime="0:30:00",
        mem_mb=2000,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.embedding} \
            --output-figure {output.figure} \
            {wildcards.method} \
            {params.method_parameters_arg}
        """

rule simulations_grid_search_create_train_test_split:
    input:
        metadata="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/metadata.tsv",
        alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/filtered.fasta",
    output:
        training_alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/training_alignment.fasta",
        test_alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/test_alignment.fasta",
    conda: "../cartography.yml"
    log:
        "logs/simulations_grid_search_create_train_test_split_{virus}_{recombination_rate}_{replicate}_{train_test_split}.txt"
    params:
        time_column="generation",
        total_train_test_splits=SIMULATION_TOTAL_TRAIN_TEST_SPLITS,
        gap=lambda wildcards: SIMULATION_GAP_BETWEEN_TRAIN_TEST_INFLUENZA if wildcards.virus == "influenza" else SIMULATION_GAP_BETWEEN_TRAIN_TEST_CORONAVIRUS,
        train_test_size=lambda wildcards: SIMULATION_TRAIN_TEST_SIZE_INFLUENZA if wildcards.virus == "influenza" else SIMULATION_TRAIN_TEST_SIZE_CORONAVIRUS,
    shell:
        """
        python3 notebooks/scripts/create_time_series_train_test_split.py \
            --metadata {input.metadata} \
            --alignment {input.alignment} \
            --time-column {params.time_column} \
            --total-train-test-splits {params.total_train_test_splits} \
            --gap {params.gap} \
            --train-test-split {wildcards.train_test_split} \
            --train-test-size {params.train_test_size} \
            --output-training-alignment {output.training_alignment} \
            --output-test-alignment {output.test_alignment} 2>&1 | tee {log}
        """

rule simulations_create_training_or_test_distance_matrix:
    input:
        alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/{training_or_test}_alignment.fasta",
    output:
        output="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/{training_or_test}_genetic_distances.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule simulations_grid_search_embed_training_or_test_data:
    input:
        alignment="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/{training_or_test}_alignment.fasta",
        distance_matrix="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/{training_or_test}_genetic_distances.csv",
    output:
        embedding=f"simulations/{{virus}}-like/{{recombination_rate}}/replicate-{{replicate}}/gridsearch/train_test_{{train_test_split}}/params_{SIMULATION_METHOD_PARAMETERS.wildcard_pattern}/{{training_or_test}}_embedding.csv",
    params:
        random_seed=RANDOM_SEED,
        method_parameters_arg=_get_method_parameters_argument,
    resources:
        runtime="0:30:00",
        mem_mb=2000,
    conda: "../cartography.yml"
    shell:
        """
        embed \
            --alignment {input.alignment} \
            --distance-matrix {input.distance_matrix} \
            --random-seed {params.random_seed} \
            --output-dataframe {output.embedding} \
            {wildcards.method} \
            {params.method_parameters_arg}
        """

rule simulations_grid_search_accuracy:
    input:
        training_genetic_distances="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/training_genetic_distances.csv",
        test_genetic_distances="simulations/{virus}-like/{recombination_rate}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/test_genetic_distances.csv",
        training_embedding=f"simulations/{{virus}}-like/{{recombination_rate}}/replicate-{{replicate}}/gridsearch/train_test_{{train_test_split}}/params_{SIMULATION_METHOD_PARAMETERS.wildcard_pattern}/training_embedding.csv",
        test_embedding=f"simulations/{{virus}}-like/{{recombination_rate}}/replicate-{{replicate}}/gridsearch/train_test_{{train_test_split}}/params_{SIMULATION_METHOD_PARAMETERS.wildcard_pattern}/test_embedding.csv",
    output:
        statistics=f"simulations/{{virus}}-like/{{recombination_rate}}/replicate-{{replicate}}/gridsearch/train_test_{{train_test_split}}/params_{SIMULATION_METHOD_PARAMETERS.wildcard_pattern}/embedding_accuracy.csv",
    conda: "../cartography.yml"
    params:
        method_parameters=SIMULATION_METHOD_PARAMETERS.instance,
        simulation_parameters=lambda wildcards: {"recombination_rate": wildcards.recombination_rate, "replicate": wildcards.replicate, "train_test_split": wildcards.train_test_split}
    shell:
        """
        python3 notebooks/scripts/calculate_embedding_accuracy.py \
            --training-genetic-distances {input.training_genetic_distances} \
            --training-embedding {input.training_embedding} \
            --test-genetic-distances {input.test_genetic_distances} \
            --test-embedding {input.test_embedding} \
            --output {output.statistics} \
            --annotations {params.method_parameters:q} {params.simulation_parameters:q}
        """

rule simulations_aggregate_grid_search:
    input:
        tables=expand("simulations/{{virus}}-like/{{recombination_rate}}/replicate-{replicate}/gridsearch/train_test_{train_test_split}/params_{params}/embedding_accuracy.csv",
                      replicate=SIMULATION_REPLICATES,
                      train_test_split=SIMULATION_TRAIN_TEST_SPLITS,
                      params=SIMULATION_METHOD_PARAMETERS.instance_patterns)
    output:
        table="simulations/{virus}-like/{recombination_rate}/gridsearch.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --output {output.table}
        """

rule simulations_summarize_grid_search:
    input:
        table="simulations/{virus}-like/{recombination_rate}/gridsearch.csv"
    output:
        pca_parameters = "simulations/{virus}-like/{recombination_rate}/pca_parameters.csv",
        mds_parameters = "simulations/{virus}-like/{recombination_rate}/mds_parameters.csv",
        tsne_parameters = "simulations/{virus}-like/{recombination_rate}/t-sne_parameters.csv",
        umap_parameters = "simulations/{virus}-like/{recombination_rate}/umap_parameters.csv",
        score_by_pca_parameters = "simulations/{virus}-like/{recombination_rate}/score_by_pca_parameters.pdf",
        score_by_mds_parameters = "simulations/{virus}-like/{recombination_rate}/score_by_mds_parameters.pdf",
        score_by_tsne_parameters = "simulations/{virus}-like/{recombination_rate}/score_by_t-sne_parameters.pdf",
        score_by_umap_parameters = "simulations/{virus}-like/{recombination_rate}/score_by_umap_parameters.pdf",
        summary_score_by_method = "simulations/{virus}-like/{recombination_rate}/summary_scores_by_method.csv",
    conda: "../cartography.yml"
    log:
        "logs/simulations_{virus}/summarize-grid-search-for-{recombination_rate}.ipynb"
    notebook:
        "../notebooks/2022-06-09-summarize-grid-search.py.ipynb"

rule simulations_coronavirus_aggregate_grid_search_summaries:
    input:
        tables=expand("simulations/coronavirus-like/{recombination_rate}/summary_scores_by_method.csv",
                      recombination_rate=SIMULATION_RECOMBINATION_RATES)
    output:
        table="simulations/coronavirus-like/summary_scores_by_recombination_rate_and_method.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --output {output.table}
        """

rule simulations_influenza_aggregate_grid_search_summaries:
    input:
        tables=expand("simulations/influenza-like/{recombination_rate}/summary_scores_by_method.csv",
                      recombination_rate=SIMULATION_REASSORTMENT_RATES)
    output:
        table="simulations/influenza-like/summary_scores_by_reassortment_rate_and_method.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --output {output.table}
        """

rule simulations_aggregate_all_grid_search_summaries:
    input:
        tables=[
            "simulations/influenza-like/summary_scores_by_reassortment_rate_and_method.csv",
            "simulations/coronavirus-like/summary_scores_by_recombination_rate_and_method.csv",
        ],
    output:
        table="simulations/summary_scores_by_virus_reassortment_rate_and_method.csv",
    conda: "../cartography.yml"
    shell:
        """
        python3 notebooks/scripts/concatenate_tables.py \
            --tables {input.tables} \
            --output {output.table}
        """
