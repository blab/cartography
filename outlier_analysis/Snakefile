ANALYSIS_TYPE = [
    "filtered",
    "human",
    "swine",
    "full"
]

ANALYSIS_ALIGN = [
    "filtered",
    "human_swine",
    "full"
]
rule all:
    input:
        expand("results/sequences_{analysis}.fasta", analysis=ANALYSIS_TYPE),
        expand("results/metadata_{analysis}.tsv", analysis=ANALYSIS_TYPE),
        expand("results/filtered_{type}.fasta", type=ANALYSIS_TYPE),
        expand("results/deduplicated_sequences_{analysis}.fasta", analysis=ANALYSIS_TYPE),

        "results/total_sequences.fasta",
        "results/total_metadata.tsv",

        expand("results/aligned_{analysis}.fasta", analysis=ANALYSIS_ALIGN),
        expand("results/distance_matrix_{analysis}.csv", analysis=ANALYSIS_ALIGN),
        expand("results/embed_mds_{analysis}.csv", analysis=ANALYSIS_ALIGN),
        expand("results/outliers_{analysis}.csv", analysis=["filtered", "human_swine"]),
        "results/outliers_full.csv",
        "../auspice/cartography_flu-outlier-h3n2-swine-human.json",

        "results/KDEDensity_mds_human_swine.png",  
        "results/table.tsv",
        "../docs/distributionLOFOutlierFull.png",
        "../docs/distributionLOFOutlierHumanSwine.png",
        "../docs/KDEDensityFluOutlierHumanSwine.png",
        "results/accuracy_figure_HDBSCAN_human_swine.png"

def _get_path_by_wildcards(wildcards):
    method = wildcards.analysis
    if method in ("human", "filtered"):
        return "data/ncbi-h3n2-human.fa"
    if method in ("full"):
        return "data/ncbi-h3n2-full.fa"
    if method in ("swine"):
        return "data/ncbi-h3n2-swine.fa"

rule files:
    params:
        dropped_strains = "config/exclude.txt",
        reference = "config/reference_h3n2_ha.gb",
        auspice_config = "config/auspice_config.json",
        clades = "config/clades_h3n2_ha.tsv"

files = rules.files.params

rule parse:
    message: "Parsing fasta into sequences and metadata"
    input:
        sequences = _get_path_by_wildcards,
    output:
        sequences = "results/sequences_{analysis}.fasta",
        metadata = "results/metadata_{analysis}.tsv"
    params:
        fasta_fields = "strain date accession country region"
    conda: "../cartography.yml"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields}
        """

rule deduplicate_sequences:
    message:
        """
        Deduplicating sequences
        """
    input:
        sequences = rules.parse.output.sequences
    output:
        sequences = "results/deduplicated_sequences_{analysis}.fasta"
    conda: "../cartography.yml"
    shell:
        """
        python3 scripts/deduplicate_sequences.py \
            --sequences {input.sequences} \
            --output {output.sequences}
        """

def _get_group_values_by_wildcards(wildcards):
    method = wildcards.analysis
    if method in ("human"):
        return 15
    if method in ("swine"):
        return 1
    else:
        return 10

def get_dropped_strains_by_wildcards(wildcards):
    method = wildcards.analysis
    if method in ("filtered"):
        return "config/outliers_h3n2_full.txt"
    else:
        return "config/exclude.txt"

rule filter:
    message:
        """
        Filtering to
          - {params.sequences_per_group} sequence(s) per {params.group_by!s}
          - from {params.min_date} onwards
          - excluding strains in {input.exclude}
        """
    input:
        sequences = rules.deduplicate_sequences.output.sequences,
        metadata = rules.parse.output.metadata,
        exclude = get_dropped_strains_by_wildcards
    output:
        sequences = "results/filtered_{analysis}.fasta"
    params:
        group_by = "country year month",
        sequences_per_group = _get_group_values_by_wildcards,
        min_date = 1970.75,
        max_date = 2050.25
    conda: "../cartography.yml"
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output {output.sequences} \
            --group-by {params.group_by} \
            --sequences-per-group {params.sequences_per_group} \
            --min-date {params.min_date} \
            --max-date {params.max_date}
        """

#grab outlier names from swine, add to outlier_h3n2.txt to label as outliers later
rule outlier_names:
    message: """grab outlier names from swine, concat sequences and metadata"""
    input:
        sequences_swine = "results/filtered_swine.fasta",
        sequences_human = "results/filtered_human.fasta",
        exclude = "config/outliers_h3n2.txt",
        metadata_swine = "results/metadata_swine.tsv",
        metadata_human = "results/metadata_human.tsv"
    output:
        sequences = "results/total_sequences.fasta",
        metadata = "results/total_metadata.tsv"
    shell:
        """
        python3 scripts/outlier_concat.py \
            --sequence-human {input.sequences_human} \
            --sequence-outlier {input.sequences_swine} \
            --metadata-outlier {input.metadata_swine} \
            --metadata-human {input.metadata_human} \
            --outlier-list {input.exclude} \
            --output-fasta {output.sequences} \
            --output-metadata {output.metadata}
        """

def get_sequences_by_wildcards(wildcards):
    method = wildcards.analysis
    if method in ("human_swine"):
        return "results/total_sequences.fasta"
    else:
        return f"results/filtered_{method}.fasta"

def get_metadata_by_wildcards(wildcards):
    method = wildcards.analysis
    if method in ("human_swine"):
        return "results/total_metadata.tsv"
    else:
        return f"results/metadata_{method}.tsv"

rule align:
    message:
        """
        Aligning sequences to {input.reference}
          - filling gaps with N
        """
    input:
        sequences = get_sequences_by_wildcards,
        reference = files.reference
    output:
        alignment = "results/aligned_{analysis}.fasta"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --remove-reference \
            --nthreads {threads}
        """

rule tree:
    message: "Building tree"
    input:
        alignment = "results/aligned_human_swine.fasta"
    output:
        tree = "results/tree_raw_human_swine.nwk"
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads}
        """

rule refine:
    message:
        """
        Refining tree
          - estimate timetree
          - use {params.coalescent} coalescent timescale
          - estimate {params.date_inference} node dates
        """
    input:
        tree = rules.tree.output.tree,
        alignment = "results/aligned_human_swine.fasta",
        metadata = "results/total_metadata.tsv"
    output:
        tree = "results/tree_human_swine.nwk",
        node_data = "results/branch_lengths_human_swine.json"
    params:
        coalescent = "opt",
        date_inference = "marginal",
        clock_rate = 0.00382,
        clock_std_dev = 0.000764
    conda: "../cartography.yml"
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-rate {params.clock_rate} \
            --clock-std-dev {params.clock_std_dev}
        """

rule ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.refine.output.tree,
        alignment = "results/aligned_human_swine.fasta"
    output:
        node_data = "results/nt_muts.json"
    params:
        inference = "joint"
    conda: "../cartography.yml"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference}
        """

rule translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.refine.output.tree,
        node_data = rules.ancestral.output.node_data,
        reference = files.reference
    output:
        node_data = "results/aa_muts.json"
    conda: "../cartography.yml"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data} 
        """

rule clades:
    message: " Labeling clades as specified in config/clades.tsv"
    input:
        tree = rules.refine.output.tree,
        aa_muts = rules.translate.output.node_data,
        nuc_muts = rules.ancestral.output.node_data,
        clades = files.clades
    output:
        clade_data = "results/clades.json"
    conda: "../cartography.yml"
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.nuc_muts} {input.aa_muts} \
            --clades {input.clades} \
            --output {output.clade_data}
        """

rule traits:
    message: "Inferring ancestral traits for {params.columns!s}"
    input:
        tree = rules.refine.output.tree,
        metadata = "results/total_metadata.tsv",
    output:
        node_data = "results/traits.json",
    params:
        columns = "region country"
    conda: "../cartography.yml"
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --confidence
        """

rule export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.refine.output.tree,
        metadata = "results/total_metadata.tsv",
        branch_lengths = rules.refine.output.node_data,
        traits = rules.traits.output.node_data,
        nt_muts = rules.ancestral.output.node_data,
        aa_muts = rules.translate.output.node_data,
        embeddings = "results/embed_mds_human_swine.json",
        outliers = "results/outliers_human_swine.json",
        auspice_config = files.auspice_config,
        colors = "config/colors.tsv",
        clades = rules.clades.output.clade_data
    output:
        auspice_tree = "../auspice/cartography_flu-outlier-h3n2-swine-human.json"
    conda: "../cartography.yml"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.traits} {input.clades} {input.nt_muts} {input.aa_muts} {input.embeddings} {input.outliers} \
            --auspice-config {input.auspice_config} \
            --colors {input.colors} \
            --output {output.auspice_tree}
        """

rule tree_to_table:
    message: "creating a table of node data values from the tree attributes"
    input: 
        tree = rules.export.output.auspice_tree
    output:
        table = "results/table.tsv"
    params:
        attributes = "num_date mds1 mds2 clade_membership mds_label"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/auspice_tree_to_table.py \
            {input.tree} \
            {output.table} \
            --attributes {params.attributes}
        """
    
rule create_distance_matrix:
    message: "creating the distance matrix to be used in the rest of the analysis"
    input:
        alignment = rules.align.output.alignment
    output:
        output = "results/distance_matrix_{analysis}.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/hamming_distance_from_fasta.py \
            --alignment {input.alignment} \
            --output {output.output}
        """

rule make_clades:
    message: "creating the clades file to be used in the rest of the analysis"
    input:
        metadata = "results/total_metadata.tsv"
    output:
        output = "results/outlier_status.json"
    params:
        col_name = "outlier"
    shell:
        """
        python3 ../notebooks/scripts/make_clades.py \
            --metadata {input.metadata} \
            --output {output.output} \
            --col-name {params.col_name}
        """

def _create_distance_thresholds(wildcards):
    import numpy as np
    thresholds = list(np.arange(0,40,4))
    string_values = " ".join([str(i) for i in thresholds])
    return string_values
    
rule cluster_embeddings:
    message: "finding the optimal HDBSCAN distance thresholds for the embeddings"
    input:
        alignment = "results/aligned_human_swine.fasta",
        metadata = "results/outlier_status.json",
        distance_matrix = "results/distance_matrix_human_swine.csv"
    output:
        dataframe_full = "results/full_output_HDBSCAN_human_swine.csv",
        dataframe = "results/output_HDBSCAN_human_swine.csv",
        figure = "results/accuracy_figure_HDBSCAN_human_swine.png"
    params:
        clade_column = "clade_membership",
        threshold_information = _create_distance_thresholds
    conda: "../cartography.yml"
    threads: 4
    shell:
        """
        python3 scripts/cluster_results_outlier.py \
            --distance-matrix {input.distance_matrix} \
            --alignment {input.alignment} \
            --clades {input.metadata} \
            --column-metadata {params.clade_column} \
            --threshold-information {params.threshold_information} \
            --output {output.dataframe} \
            --output-full {output.dataframe_full} \
            --output-figure {output.figure} \
        """

rule embed_mds:
    message: "Creating the embedding (dataframe, node JSON) for MDS"
    input:
        distance_matrix = "results/distance_matrix_human_swine.csv",
        cluster = "results/output_HDBSCAN_human_swine.csv"
    output:
        node_data = "results/embed_mds_{analysis}.json",
        dataframe = "results/embed_mds_{analysis}.csv",
        figure = "results/embed_mds_{analysis}.pdf"
    params:
        components = 2
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/embed.py \
            --distance-matrix {input.distance_matrix} \
            --cluster-data {input.cluster} \
            --random-seed 314159 \
            --output-node-data {output.node_data} \
            --output-dataframe {output.dataframe} \
            --output-figure {output.figure} \
            mds \
            --components {params.components} \
        """

def _get_embedding_columns_by_wildcards(wildcards):
    method = wildcards.method.replace("-", "")

    if method in ("pca"):
        return f"{method}1 {method}2 {method}3 {method}4"
    if method in ("mds"):
        return f"{method}1 {method}2"
    else:
        return f"{method}_x {method}_y"

def _get_embedding_path_by_wildcards(wildcards):
    method = wildcards.method

    if method in ("pca", "mds", "t-sne", "umap"):
        return f"results/embed_{method}.csv"
    else:
        return "results/distance_matrix.csv"

rule KDE_density:
    message: "creating the KDE density plot"
    input:
        embedding = "results/embed_mds_human_swine.csv",
        clades = "results/clades.json",
        metadata = "results/total_metadata.tsv"
    output:
        figure = "results/KDEDensity_mds_human_swine.png",
        dataframe = "results/KDEDensity_mds_human_swine.csv",
        metadata = "results/KDEDensity_mds_metadata_human_swine.csv"
    params:
        embedding_columns = "mds1 mds2",
        differentiator_column = "outlier"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/within_vs_between_status.py \
            --embedding {input.embedding} \
            --method mds \
            --metadata {input.metadata} \
            --embedding-columns {params.embedding_columns} \
            --differentiator-column {params.differentiator_column} \
            --output-figure {output.figure} \
            --output-dataframe {output.dataframe} \
            --output-metadata {output.metadata}
        """

rule concat_KDE_table:
    message: "concatenating all the KDE data into one csv dataframe"
    input:
       dataframe_pca = "results/KDEDensity_pca_metadata.csv",
       dataframe_mds = "results/KDEDensity_mds_metadata.csv", 
       dataframe_tsne = "results/KDEDensity_t-sne_metadata.csv", 
       dataframe_umap = "results/KDEDensity_umap_metadata.csv",
       dataframe_genetic = "results/KDEDensity_genetic_metadata.csv"
    output:
        metadata = "results/full_KDE_metadata.csv"
    params:
        column = "MCC",
        dataframes = "results/KDEDensity_pca_metadata.csv results/KDEDensity_mds_metadata.csv results/KDEDensity_t-sne_metadata.csv results/KDEDensity_umap_metadata.csv results/KDEDensity_genetic_metadata.csv"
    conda: "../cartography.yml"
    shell:
        """
        python3 ../notebooks/scripts/concatenate_tables.py \
            --tables {params.dataframes} \
            --separator ',' \
            --sort-by {params.column} \
            --output {output.metadata}
        """


rule find_outliers:
    message: "find outliers and make figure"
    input:
       embedding = "results/embed_mds_{analysis}.csv",
       metadata = "results/total_metadata.tsv"
    output:
        outliers = "results/outliers_{analysis}.csv",
        figure = "../docs/outlierMainFigure_{analysis}.png",
        LOF_figure = "../docs/LOF_figure_{analysis}.html",
        metadata = "../docs/LOF_accuracy_{analysis}.csv",
        json = "results/outliers_{analysis}.json"
    params:
        method = "MDS",
        columns = "mds1 mds2", 
    conda: "../cartography.yml"
    shell:
        """
        python3 scripts/LOF_distance_calculations.py \
            --method {params.method} \
            --embedding {input.embedding} \
            --true-outliers {input.metadata} \
            --columns {params.columns} \
            --output-outliers {output.outliers} \
            --output-main-figure {output.figure} \
            --output-LOF-figure {output.LOF_figure} \
            --output-metadata {output.metadata} \
            --output-json {output.json}
        """

rule find_outliers_other:
    message: "find outliers and make figure"
    input:
       embedding = "results/embed_mds_full.csv",
       metadata = "results/metadata_full.tsv"
    output:
        outliers = "results/outliers_full.csv",
        figure = "../docs/outlierMainFigure_Full.png"
    params:
        method = "MDS",
        columns = "mds1 mds2", 
    conda: "../cartography.yml"
    shell:
        """
        python3 scripts/LOF_distance_calculations.py \
            --method {params.method} \
            --embedding {input.embedding} \
            --find-outlier \
            --columns {params.columns} \
            --output-outliers {output.outliers} \
            --output-main-figure {output.figure} 
        """
#get this rule working 
rule create_notebook_docs:
    message: "creating linked and grouped charts using the jupyter notebook"
    input:
        #Charts, tree:
        node_df = "results/table.tsv",

        mds_df_human_swine = "results/embed_mds_human_swine.csv",
        mds_df_full = "results/embed_mds_full.csv",

        outlier_df_human_swine = "results/outliers_human_swine.csv",
        outlier_df_full = "results/outliers_full.csv",

        #KDE Density
        MDS_KDE_df_human_swine = "results/KDEDensity_mds_human_swine.csv",
        MDS_KDE_metadata_df_human_swine = "results/KDEDensity_mds_metadata_human_swine.csv",
        MDS_outlier_metadata_df_human_swine = "../docs/LOF_accuracy_human_swine.csv",

    output:
        distributionFull = "../docs/distributionLOFOutlierFull.png",
        distributionHumanSwine = "../docs/distributionLOFOutlierHumanSwine.png",
        KDE_densityHumanSwine = "../docs/KDEDensityFluOutlierHumanSwine.png"

    conda: "../cartography.yml"
    notebook:
        "Outlier.ipynb"

rule clean:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice"
    conda: "../cartography.yml"
    shell:
        "rm -rfv {params}"